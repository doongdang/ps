import java.util.*;

class Solution {
    public int[] solution(String s) {
        String remove = s.substring(1, s.length()-1);
        int cnt = 0;
        int num = 0;

        for(int i = 0; i < remove.length(); i++) {
            if(remove.charAt(i) == '{') {
                cnt++;
            }
        }

        ArrayList<Integer>[] subSets = new ArrayList[cnt];
        int[] answer = new int[cnt];

        for(int i = 0; i < cnt; i++) {
            subSets[i] = new ArrayList<>();
        }

        int subSetIdx = 0;

        for(int i = 0; i < remove.length(); i++) {
            int currentChar = remove.charAt(i) - '0';

            if(currentChar >= 0 && currentChar < 10) {
                num = num * 10 + currentChar;
            }else {
                if(remove.charAt(i) == ',') {
                    subSets[subSetIdx].add(num);
                    num = 0;
                }else if(remove.charAt(i) == '}') {
                    subSets[subSetIdx].add(num);
                    num = 0;
                    subSetIdx++;
                    i++;
                    continue;
                }
            }
        }

        PriorityQueue<ArrayList<Integer>> pq = new PriorityQueue<>((a1, a2) -> a1.size() - a2.size());

        for(ArrayList<Integer> subSet : subSets) {
            pq.offer(subSet);
        }

        Set<Integer> set = new HashSet<>();
        int idx = 0;

        while(!pq.isEmpty()) {
            ArrayList<Integer> cur = pq.poll();

            for(int number : cur) {
                if(!set.contains(number)) {
                    idx = set.size();
                    answer[idx] = number;
                    set.add(number);
                }
            }
        }



        return answer;
    }
}