import java.util.*;

class Pair {
    int dest;
    int idx;

    public Pair(int dest, int idx) {
        this.dest = dest;
        this.idx = idx;
    }
}

public class Solution {
    static List<Pair>[] outputEdges;
    static boolean[] isUsedEdge;

    public int bfs(int startNode) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(startNode);

        int visEdges = 0;
        int curNode = 0;

        while (!queue.isEmpty()) {
            curNode = queue.poll();

            if (outputEdges[curNode].size() == 2){
                return 3;
            }

            for (Pair nxt : outputEdges[curNode]) {
                if (!isUsedEdge[nxt.idx]) {
                    visEdges++;
                    isUsedEdge[nxt.idx] = true;
                    queue.offer(nxt.dest);
                }
            }
        }

        if(curNode == startNode){
            if(visEdges == 0){
                return 2;
            }
            return 1;
        }else {
            return 2;
        }
    }

    public int[] solution(int[][] edges) {
        int[] answer = new int[4];

        outputEdges = new LinkedList[1000001];
        isUsedEdge = new boolean[edges.length];
        int[] inputEdges = new int[1000001];

        int generatedNode = 0;

        for (int i = 1; i <= 1000000; i++) {
            outputEdges[i] = new LinkedList<>();
        }

        for (int i = 0; i < edges.length; i++) {
            int a = edges[i][0];
            int b = edges[i][1];

            outputEdges[a].add(new Pair(b, i));
            inputEdges[b] += 1;
        }

        for (int i = 1; i <= 1000000; i++) {
            if (inputEdges[i] == 0 && outputEdges[i].size() >=2) {
                generatedNode = i;
                break;
            }
        }

        answer[0] = generatedNode;

        for (Pair pair : outputEdges[generatedNode]) {
            int answerIdx = bfs(pair.dest);
            answer[answerIdx] += 1;
        }

        return answer;
    }
}