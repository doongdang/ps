import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.StringTokenizer;

class Pair {
	int d;
	int w;

	public Pair(int d, int w) {
		this.d = d;
		this.w = w;
	}
}

public class Main {

	static int N;
	static Pair[] eggs;
	static boolean[] location;
	static int answer = 0;
	static int count = 0;

	public static void recursion(int peek) { //peek => 현재 자기가 집은 계란
		if (peek == N) {
			answer = Math.max(answer, count);
			return;
		}
		if (eggs[peek].d <= 0 || count == N-1) { //현재 계란의 내구도가 0이거나 다른 모든 계란이 깨진 상태라면 넘어간다.
			recursion(peek + 1);
			return;
		}	//count == N-1이라면 자기 자신을 빼고 모든 계란이 깨진 상태이다.

		for (int i = 0; i < N; i++) {
			if (i == peek)
				continue; //자기 자신은 칠 수 없다.
			if (eggs[i].d <= 0)
				continue; //내구도가 0 이하인, 즉 존재하지 않는 계란은 칠 수 없다.
			eggs[i].d -= eggs[peek].w;
			eggs[peek].d -= eggs[i].w;
			if (eggs[i].d <= 0)
				count++;
			if (eggs[peek].d <= 0)
				count++;
			recursion(peek+1);
			if (eggs[i].d <= 0)
				count--;
			if (eggs[peek].d <= 0)
				count--;
			eggs[i].d += eggs[peek].w;
			eggs[peek].d += eggs[i].w;
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		N = Integer.parseInt(br.readLine());
		eggs = new Pair[N];
		location = new boolean[N];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			eggs[i] = new Pair(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
		}

		recursion(0);

		System.out.println(answer);

	}
}