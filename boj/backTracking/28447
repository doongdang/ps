import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	int N, K;
	int[][] C;
	int[] selected;
	int answer = Integer.MIN_VALUE;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		C = new int[N][N];
		selected = new int[N];
		Arrays.fill(selected, -1);

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				C[i][j] = Integer.parseInt(st.nextToken());
			}
		}
	}

	public void recursion(int cur, int selectedCnt){
		if(selectedCnt > K){
			return;
		}

		if(cur == N){
			if(selectedCnt < K) return;
			int cnt = 0;

			for (int i = 0; i < K; i++) {
				if(selected[i] == -1) continue;
				for (int j = i+1; j < K; j++) {
					if(selected[j] == -1) continue;
					cnt += C[selected[i]][selected[j]];
				}
			}
			answer = Math.max(cnt, answer);
			return;
		}

		recursion(cur+1, selectedCnt);

		int recover = selected[selectedCnt];
		selected[selectedCnt] = cur;
		recursion(cur+1, selectedCnt+1);
		selected[selectedCnt] = recover;
	}


	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.recursion(0, 0);
		System.out.println(m.answer);
	}
}