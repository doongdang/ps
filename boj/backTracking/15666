import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static int N;
	static int M;
	static int[] arr;
	static int[] ans;
	static boolean[] isDup;
	static StringBuilder sb = new StringBuilder();

	public static void dfs(int k, int start){
		if(k == M){
			for (int i = 0; i < M; i++) {
				sb.append(ans[i]).append(" ");

			}
			sb.append("\n");
			return;
		}
		for (int i = start; i < N; i++) {
			ans[k] = arr[i];
			dfs(k+1, i);
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		arr = new int[N];
		ans = new int[M];
		isDup = new boolean[10001];

		st = new StringTokenizer(br.readLine());

		int idx = 0;
		while(st.hasMoreTokens()){
			int tmp = Integer.parseInt(st.nextToken());
			if(isDup[tmp]) continue;
			arr[idx++] = tmp;
			isDup[tmp] = true;
		}
		N = idx;
		Arrays.sort(arr, 0, N);
		dfs(0, 0);
		System.out.println(sb);
	}
}