import java.io.*;
import java.util.*;

public class Main {	
	static int L;
	static ArrayList<char[][]> list;
	static int[][] paper;
	static boolean[] vis;
	static int[] choice;
	static StringBuilder sb;
	static StringBuilder ans = new StringBuilder();

	public static void fillPaper(int x, int y, char[][] piece, int num) {
		for(int i = x; i < x + piece.length; i++) {
			for(int j = y; j < y + piece[0].length; j++) {
				if(piece[i-x][j-y] == '#') paper[i][j] = num;
			}
		}	
		
	}
	
	
	public static boolean canFillPaper(char[][] piece, int num) {
		int pxLen = piece.length;
		int pyLen = piece[0].length;
		boolean canFill = true;
		for(int i = 0; i <= L - pxLen; i++) {
			for(int j = 0; j <= L - pyLen; j++) {
				canFill = true;
				loop:
				for(int x = i; x < i + pxLen; x++) {
					for(int y = j; y < j + pyLen; y++) {
						if(paper[x][y] != 0 && piece[x-i][y-j] == '#') {
							canFill = false;
							break loop;
						}
					}
				}
				
				if(canFill) {
					fillPaper(i, j, piece, num);
					return true;
				}
			}
		}
		
		return false;
	}
	
	public static void dfs(int cnt) {
		if(cnt == 5) {
			paper = new int[L][L];
			sb = new StringBuilder();
			
			for(int i = 0; i < 5; i++) {
				if(!canFillPaper(list.get(choice[i]), choice[i]+1)) return;
			}
			
			for(int[] r : paper) {
				for(int c : r) {
					if(c == 0) return;
				}
			}
			
			for(int[] r : paper) {
				for(int c : r) {
					sb.append(c);
				}
				sb.append("\n");
			}
			
			if(ans.toString().compareTo(sb.toString()) > 0) {
				ans = new StringBuilder(sb.toString());
			}
			
			return;
		}
		
		for(int i = 0; i < 5; i++) {
			if(!vis[i]) {
				vis[i] = true;
				choice[cnt] = i;
				dfs(cnt+1);
				vis[i] = false;
			}
		}
	}
	
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
			
		L = Integer.parseInt(br.readLine());
		list = new ArrayList<>();
		vis = new boolean[5];
		choice = new int[5];
		
		
		for(int cnt = 0; cnt < 5; cnt++) {
			st = new StringTokenizer(br.readLine());
			int N = Integer.parseInt(st.nextToken());
			int M = Integer.parseInt(st.nextToken());
		
			
			char[][] piece = new char[N][M];
			for(int i = 0; i < N; i++) {
				piece[i] = br.readLine().toCharArray();
			}
			list.add(piece);
					
		}
		
		ans.append("99999").append("\n");
		ans.append("99999").append("\n");
		ans.append("99999").append("\n");
		ans.append("99999").append("\n");
		ans.append("99999").append("\n");
		
		dfs(0);
		
		if(ans.charAt(0) == '9') {
			ans = new StringBuilder("gg");
		}
		
		System.out.println(ans);
	}
}
