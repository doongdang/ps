import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	int n,m,k;
	int[] requiredSkillBit;
	int answer;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		requiredSkillBit = new int[m];

		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < k; j++) {
				requiredSkillBit[i] = requiredSkillBit[i] | (1 << Integer.parseInt(st.nextToken())-1);
			}
		}
	}

	public void solve() {
		recursion(0, 0);
		System.out.println(answer);
	}

	public void recursion(int cur, int skillBit) {
		if(Integer.bitCount(skillBit) > n) return;
		if(cur == 2*n+1){
			if(Integer.bitCount(skillBit) < n) return;
			int cnt = 0;
			for (int i = 0; i < m; i++) {
				if((requiredSkillBit[i] & skillBit) == requiredSkillBit[i]){
					cnt++;
				}
			}
			answer = Math.max(cnt,answer);
			return;
		}

		recursion(cur+1, skillBit);
		recursion(cur+1, skillBit | (1 << cur-1));
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}