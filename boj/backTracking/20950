import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	int N;
	int[] R;
	int[] G;
	int[] B;
	int gR, gG, gB;
	int cR, cG, cB;
	int answer;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		N = Integer.parseInt(br.readLine());
		R = new int[N];
		G = new int[N];
		B = new int[N];
		answer = Integer.MAX_VALUE;

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			R[i] = Integer.parseInt(st.nextToken());
			G[i] = Integer.parseInt(st.nextToken());
			B[i] = Integer.parseInt(st.nextToken());
		}

		st = new StringTokenizer(br.readLine());
		gR = Integer.parseInt(st.nextToken());
		gG = Integer.parseInt(st.nextToken());
		gB = Integer.parseInt(st.nextToken());
	}

	public void solve() {
		for (int i = 2; i <= Math.min(N, 7); i++) {
			recursion(0, 0, i);
		}
	}

	public void recursion(int cur, int start, int size) {
		if(cur == size){
			answer = Math.min(answer, Math.abs(gR - cR/size) + Math.abs(gG - cG/size) + Math.abs(gB - cB/size));
			return;
		}

		for (int i = start; i < N; i++) {
			cR += R[i];
			cG += G[i];
			cB += B[i];
			recursion(cur + 1, i + 1, size);
			cR -= R[i];
			cG -= G[i];
			cB -= B[i];
		}
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
		System.out.println(m.answer);
	}
}