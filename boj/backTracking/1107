import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	int N, M;
	boolean[] isDisabled;
	int answer;
	int maxOfNumBtnCtn;
	int diff;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		M = Integer.parseInt(br.readLine());
		isDisabled = new boolean[10];
		answer = Integer.MAX_VALUE;
		maxOfNumBtnCtn = N == 0 ? 1 : (int)Math.ceil(Math.log10(N)) + 1;

		if(M != 0){
			StringTokenizer st = new StringTokenizer(br.readLine());
			for(int i = 0; i < M; i++){
				isDisabled[st.nextToken().charAt(0)-'0'] = true;
			}
		}
	}

	public void solve() {
		recursion(0, 0, -1);
		System.out.println(answer);
	}

	public void recursion(int cur, int cnt, int channel) {
		if(cur == maxOfNumBtnCtn){
			if(channel == -1){
				diff = Math.abs(100-N);
			}else{
				diff = Math.abs(channel-N);
			}

			answer = Math.min(answer, cnt + diff);
			return;
		}

		recursion(cur+1, cnt, channel);

		for (int i = 0; i < 10; i++) {
			if(isDisabled[i]) continue;

			if(channel == -1) {
				recursion(cur + 1, cnt + 1, i);
			}else if(channel == 0 && isDisabled[0]){
				continue;
			} else{
				recursion(cur+1, cnt+1, channel*10 + i);
			}
		}
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}