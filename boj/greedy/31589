import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
	접근법
		목표 : N종류의 포도주들 중 K종류를 골라 마시되, 느낄 수 있는 맛의 합을 극대화할 것. 맛 -> Ti
		조건 : 1. 맛의 값이 높은 포도주가 더 맛있는 포도주다.
			  2. 맛있는 포도주를 마시다 맛없는 포도주를 마실 경우, 0의 맛
			  3. 맛없는 포도주를 마시다 맛있는 포도주를 마실 경우 (맛난 포도주 - 맛없는 포도주)의 차이만큼 맛을 느낌
			  4. 첫 포도주의 맛은 온전히 반영
			  5. 1 <= K, N <= 300,000 / 1<= Ti <= 1,000,000,000
		맛의 최대값이 10억이기에 답의 자료형이 long이 되어야 할 듯함.

		BruteForce 풀이 : 조합(nCk) 중 최대 맛 찾기 -> 시간 복잡도 상 불가

		아이디어 : 1. 맛 순서로 정렬 후, 가장 맛있는 것을 먼저 마시고, 이후에는 남은 것 중 가장 맛없는 포도주, 가장 맛있는 포도주 순서로 K - 1개를 채운다.




*/


public class Main {
	int N, K;
	int[] T;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		T = new int[N];

		st = new StringTokenizer(br.readLine());

		for (int i = 0; i < N; i++) {
			T[i] = Integer.parseInt(st.nextToken());
		}
	}

	public void solve() {
		Arrays.sort(T);

		long answer = T[N - 1];

		int count = K - 1;
		int good = N - 2;
		int bad = 0;

		while(count > 1) {
			answer += T[good--] - T[bad++];
			count -= 2;
		}

		System.out.println(answer);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}
