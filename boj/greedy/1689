import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

class Pair{
	int point;
	int type;

	public Pair(int point, int type) {
		this.point = point;
		this.type = type;
	}
}

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		StringTokenizer st;

		int N = Integer.parseInt(br.readLine());

		//핵심 아이디어: 선분을 시작점(s)와 끝점(e)로 분리하여 정렬한다. 시작점에서 시작하여 시작점을 만나면 겹치는 선분의 길이를 +1 해주고, 끝점을 만나면 -1을 해준다.
		//단, 동일 좌표에서 시작점과 끝점이 존재하는 경우, 끝점이 우선하도록 정렬해야 한다. 점과 점이 겹치는 부분은 겹치는 갯수로 세지 않기 때문이다.
		PriorityQueue<Pair> pq = new PriorityQueue<>((p1, p2) -> p1.point == p2.point ? p2.type - p1.type : p1.point - p2.point);

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());

			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());

			pq.offer(new Pair(s, 0));
			pq.offer(new Pair(e, 1));
		}

		int cnt = 0;
		int ans = 0;

		while(!pq.isEmpty()){
			Pair cur = pq.poll();

			if(cur.type == 0){
				cnt++;

				ans = Math.max(cnt, ans);
			}else{
				cnt--;
			}

		}

		System.out.println(ans);
	}
}