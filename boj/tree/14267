import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class Main {
	static int n;
	static int m;
	static LinkedList<Integer>[] tree;
	static int[] praise;

	public static void dfs(int st){
		for(int nxt : tree[st]){
			praise[nxt] += praise[st];
			dfs(nxt);
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());

		tree = new LinkedList[n+1];
		praise = new int[n+1];

		for (int i = 1; i <= n; i++) {
			tree[i] = new LinkedList<>();
		}

		st = new StringTokenizer(br.readLine());

		for (int i = 1; i <= n; i++) {
			int superior = Integer.parseInt(st.nextToken());
			if(i == 1) continue;

			tree[superior].add(i);
		}

		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());

			int p = Integer.parseInt(st.nextToken());
			int degree = Integer.parseInt(st.nextToken());
			praise[p] += degree;
		}

		dfs(1);

		StringBuilder sb = new StringBuilder();

		for (int i = 1; i <= n; i++) {
			sb.append(praise[i]).append(" ");
		}

		System.out.println(sb);
	}
}
