import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Pair{
	int node;
	int dist;
	public Pair(int node, int dist){
		this.node = node;
		this.dist = dist;
	}
}

public class Main {
	static int N;
	static int M;
	static int[][] dist;
	static LinkedList<Integer>[] adj;
	static boolean[] vis;

	public static int bfs(int st, int en){
		Arrays.fill(vis, false);

		Queue<Pair> queue = new LinkedList<>();
		vis[st] = true;
		queue.offer(new Pair(st, 0));

		while(!queue.isEmpty()){
			Pair cur = queue.poll();

			for(int nxt : adj[cur.node]){
				if(nxt == en){
					return cur.dist + dist[cur.node][nxt];
				}

				if(!vis[nxt]){
					vis[nxt] = true;
					queue.offer(new Pair(nxt, cur.dist+ dist[cur.node][nxt]));
				}
			}
		}

		return 0;
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		dist = new int[N+1][N+1];
		vis = new boolean[N+1];
		adj = new LinkedList[N+1];

		for (int i = 1; i <= N; i++) {
			adj[i] = new LinkedList<>();
		}

		for (int i = 0; i < N-1; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int d = Integer.parseInt(st.nextToken());

			adj[a].add(b);
			adj[b].add(a);
			dist[a][b] = d;
			dist[b][a] = d;
		}

		StringBuilder sb = new StringBuilder();

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());

			int start = Integer.parseInt(st.nextToken());
			int destination = Integer.parseInt(st.nextToken());

			sb.append(bfs(start, destination)).append("\n");
		}

		System.out.println(sb);
	}
}
