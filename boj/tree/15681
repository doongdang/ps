import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class Main {
	static LinkedList<Integer>[] adj;
	static boolean[] visited;
	static int[] child;

	static int dfs(int x){

		visited[x] = true;

		for (int nxt : adj[x]) {
			if(!visited[nxt]){
				visited[nxt] = true;
				child[x] += dfs(nxt);;
			}
		}
		child[x]++;
		return child[x];
	}

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		int n = Integer.parseInt(st.nextToken());
		int r = Integer.parseInt(st.nextToken());
		int q = Integer.parseInt(st.nextToken());

		adj = new LinkedList[n+1];
		visited = new boolean[n+1];
		child = new int[n+1];

		for (int i = 0; i < n+1; i++) {
			adj[i] = new LinkedList<>();
		}

		for (int i = 0; i < n-1; i++) {
			st = new StringTokenizer(br.readLine());

			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());

			adj[u].add(v);
			adj[v].add(u);
		}

		dfs(r);

		for (int i = 0; i < q; i++) {
			System.out.println(child[Integer.parseInt(br.readLine())]);
		}
	}
}
