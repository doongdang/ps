import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;


public class Main {
	static int N;
	static int M;
	static LinkedList<Integer>[] adj;
	static boolean[] vis;

	public static void dfs(int node){
		if(vis[node]){
			return;
		}

		vis[node] = true;

		for (int nxt : adj[node]) {
			if(!vis[nxt]){
				dfs(nxt);
			}
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		adj = new LinkedList[N+1];
		vis = new boolean[N+1];

		int groupCnt = 0;

		for (int i = 1; i <= N; i++) {
			adj[i] = new LinkedList<>();
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());

			adj[u].add(v);
			adj[v].add(u);
		}

		for (int i = 1; i <= N; i++) {
			if(!vis[i]){
				dfs(i);
				groupCnt++;
			}
		}

		System.out.println(groupCnt-1+M+groupCnt-1-(N-1));
	}

}