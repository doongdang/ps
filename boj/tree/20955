import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;


public class Main {
	static int N;
	static int M;
	static LinkedList<Integer>[] adj;
	static boolean[] vis;

	public static void dfs(int node){
		if(vis[node]){
			return;
		}

		vis[node] = true;

		for (int nxt : adj[node]) {
			if(!vis[nxt]){
				dfs(nxt);
			}
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		adj = new LinkedList[N+1];
		vis = new boolean[N+1];

		int groupCnt = 0;

		for (int i = 1; i <= N; i++) {
			adj[i] = new LinkedList<>();
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());

			adj[u].add(v);
			adj[v].add(u);
		}

		for (int i = 1; i <= N; i++) {
			if(!vis[i]){
				dfs(i);
				groupCnt++;
			}
		}

		System.out.println(groupCnt-1+M+groupCnt-1-(N-1));
		//우선 현재의 그래프 상태에서 연결된 그래프 집합을 찾아 개수를 확인한다.
		//해당 그래프들을 연결한다면, 그래프는 모두 연결된 상태를 띠게 된다.
		//해당 그래프들을 연결하기 위해서는 연결된 그래프의 집합 수 - 1개의 간선이 필요하다.(groupCnt-1)
		//한편 트리가 되기 위해 필요한 간선의 개수는 노드 수 -1 개이다. (N-1)개.
		//현재 상태의 그래프에 존재하는 간선의 수는 주어진 간선 수 M + 연결된 그래프 집합간 간선 추가 groupCnt -1 = M+groupCnt-1개이다.
		//따라서 이를 N-1개로 만들기 위해 제거해야 하는 간선의 수는 M+groupCnt-1-(N-1)개이다.
		//즉, 답은 (groupCnt-1) + (M+groupCnt-1) - (N-1)개이다.
	}

}