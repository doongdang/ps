import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
		StringBuilder sb = new StringBuilder();

        st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());
        int Q = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());

        int[] arr = new int[N];

        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }

		int accumulateMove = 0;

		for (int i = 0; i < Q; i++) {
			st = new StringTokenizer(br.readLine());

			int cmd = Integer.parseInt(st.nextToken());

            if (cmd == 1) {
                int idx = Integer.parseInt(st.nextToken()) - 1;
                int addNum = Integer.parseInt(st.nextToken());
                int targetIdx = idx - accumulateMove;

                if (targetIdx < 0) {
                    targetIdx += arr.length;
                } else if (targetIdx >= arr.length) {
                    targetIdx %= arr.length;
                }

				arr[targetIdx] += addNum;
			} else {
				int s = Integer.parseInt(st.nextToken());

				if (cmd == 2) {
					accumulateMove += s;
				} else {
					accumulateMove -= s;
				}

				if (accumulateMove > arr.length || accumulateMove < -arr.length){
					accumulateMove %= arr.length;
				}
			}
		}

		int[] ans = new int[arr.length];

		for (int i = 0; i < arr.length; i++) {
			int toIdx = i + accumulateMove;

			if(toIdx >= arr.length){
				toIdx %= arr.length;
			}

			if(toIdx < 0){
				toIdx += arr.length;
			}

			ans[toIdx] = arr[i];
		}

		for (int num : ans) {
			sb.append(num).append(" ");
		}

		System.out.println(sb);
    }
}
