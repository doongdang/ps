import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;


/*
- 완전탐색 풀이
   1. (-1,000,000, -1,000,000) ~ (1,000,000 , 1,000,000)까지 모든 점에 대해  n개의 점과의 거리합을 계산한다.
   => 10^12 = 1조의 연산 소요

   2. n개의 점들을 순회하며 다른 n-1개의 점과의 거리 합을 계산한다.
   => O(n^2) = 최대 10^10 = 100억의 연산 소요

- 다른 풀이 아이디어
    x축 기준 가장 먼 두 점과 y축 기준 가장 먼 두 점을 기준으로 사각형의 영역을 그린다.
    답이 될 수 있는 지점은 해당 사각형 외곽선을 포함한 내부 영역에 존재.

    축을 분리하여 생각.
    x축 기준으로 최소 거리 지점은 x축 좌표들 중 중앙값
    y축 기준으로 최소 거리 지점은 y축 좌표들 중 중앙값

 */

public class Main {
    int n;
    int[] x;
    int[] y;

    public void init() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        n = Integer.parseInt(br.readLine().trim());
        x = new int[n];
        y = new int[n];


        for (int i = 0; i < n; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());

            x[i] = Integer.parseInt(st.nextToken());
            y[i] = Integer.parseInt(st.nextToken());

        }
    }

    public long solve() {
        long answer = 0;

        Arrays.sort(x);
        Arrays.sort(y);

        int midX = x[n/2];
        int midY = y[n/2];

        for (int i = 0; i < n; i++) {
            answer += Math.abs(x[i] - midX) + Math.abs(y[i] - midY);
        }

        return answer;
    }

    public static void main(String[] args) throws IOException {
        Main m = new Main();
        m.init();
        System.out.println(m.solve());
    }
}
