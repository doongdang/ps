import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Truck{
	int weight;
	int time;

	public Truck(int weight, int time) {
		this.weight = weight;
		this.time = time;
	}
}
public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		int n = Integer.parseInt(st.nextToken());
		int w = Integer.parseInt(st.nextToken());
		int l = Integer.parseInt(st.nextToken());

		int[] weights = new int[n];

		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < n; i++) {
			weights[i] = Integer.parseInt(st.nextToken());
		}

		int curL = 0;
		int time = 0;
		int curTruck = 0;
		Queue<Truck> bridge = new LinkedList<>();
		do {
			time++;

			if(!bridge.isEmpty() && time - bridge.peek().time == w){
				curL -= bridge.poll().weight;
			}

			if((curTruck < n) && (curL + weights[curTruck] <= l) && (bridge.size() < w)) {
				curL += weights[curTruck];
				bridge.offer(new Truck(weights[curTruck++], time));
			}
		}
		while(!bridge.isEmpty() || curTruck < n);

		System.out.println(time);
	}
}