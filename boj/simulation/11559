import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

class Pair {
	int x;
	int y;

	public Pair(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {

	static int count = 0;
	static char[][] board;
	static boolean[][] visited;

	static void pop(ArrayList<Pair> coordinates){
		for(Pair coordinate : coordinates){
			board[coordinate.x][coordinate.y] = '.';
		}
	}

	static int bfs(char color, Pair start){
		visited[start.x][start.y] = true;
		Queue<Pair> bfsQueue = new LinkedList<>();
		ArrayList<Pair> coordinates = new ArrayList<>();

		int[] dx = {-1, 0, 1, 0};
		int[] dy = {0, -1, 0, 1};

		bfsQueue.offer(new Pair(start.x, start.y));

		while(!bfsQueue.isEmpty()){
			Pair cur = bfsQueue.poll();
			coordinates.add(cur);

			for (int dir = 0; dir < 4; dir++) {
				int nx = cur.x + dx[dir];
				int ny = cur.y + dy[dir];
				if(nx < 0 || ny < 0 || nx >= 12 || ny >= 6) continue;
				if(visited[nx][ny]) continue;
				if(board[nx][ny] == color){
					visited[nx][ny] = true;
					bfsQueue.offer(new Pair(nx, ny));
				}
			}
		}
		if(coordinates.size() < 4){
			return 0;
		}else{
			pop(coordinates);
			return 1;
		}
	}

	static void moveDown(){
		for (int j = 0; j < 6; j++) {
			for (int i = 10; i >= 0; i--) {
				if(board[i][j] != '.'){
					int cur = i+1;
					while(cur < 12 && board[cur][j] == '.'){
						cur++;
					}
					if(cur-1 != i){
						board[cur-1][j] = board[i][j];
						board[i][j] = '.';
					}
				}
			}
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		boolean canPop;
		int group;
		board = new char[12][6];
		visited = new boolean[12][6];

		for (int i = 0; i < 12; i++) {
			String s = br.readLine();
			for (int j = 0; j < 6; j++) {
				board[i][j] = s.charAt(j);
			}
		}

		do {
			canPop = false;
			group = 0;
			for (int i = 0; i < 12; i++) {
				for (int j = 0; j < 6; j++) {
					if(board[i][j] == '.' || visited[i][j]) continue;
					group += bfs(board[i][j], new Pair(i,j));
				}
			}

			if(group > 0){
				canPop = true;
				count += 1;

				moveDown();
				for (int i = 0; i < 12; i++) {
					Arrays.fill(visited[i], false);
				}
			}
		}while(canPop);

		System.out.println(count);
	}
}