import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
	접근법
		[4][n] 크기의 2차원 배열에서 각 행별로 1개의 원소씩 만을 선택하여 그 합이 k에 가장 근사하게 만들어야 한다.
		완전탐색 => (1,000)^4
		배열을 2개씩 묶어서 가능한 합의 경우를 2세트 만들어 놓고, 배열 합치기로 조진다?
		합쳐놓고 투포인터로 돌리되, 그 합의 출처가 동일한지 확인한다?

*/

public class Main {
	int T;
	int[] k;
	int[] n;
	int[][][] classes;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		T = Integer.parseInt(br.readLine());
		k = new int[T];
		n = new int[T];
		classes = new int[T][4][];

		for (int i = 0; i < T; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			k[i] = Integer.parseInt(st.nextToken());
			n[i] = Integer.parseInt(st.nextToken());

			for (int j = 0; j < 4; j++) {
				classes[i][j] = new int[n[i]];
			}

			for (int j = 0; j < 4; j++) {
				st = new StringTokenizer(br.readLine());
				for (int l = 0; l < n[i]; l++) {
					classes[i][j][l] = Integer.parseInt(st.nextToken());
				}
			}
		}
	}

	public void solve() {
		StringBuilder answer = new StringBuilder();

		for (int i = 0; i < T; i++) {
			int[][] sum = new int[2][n[i] * n[i]];

			for (int j = 0; j <= 2; j += 2) {
				int idx = 0;
				for (int l = 0; l < n[i]; l++) {
					for (int m = 0; m < n[i]; m++) {
						int tmp = classes[i][j][l] + classes[i][j + 1][m];
						sum[j / 2][idx++] = tmp;
					}
				}
			}

			Arrays.sort(sum[0]);
			Arrays.sort(sum[1]);

			int st = 0;
			int en = n[i] * n[i] - 1;
			int result = Integer.MAX_VALUE;

			while (st < n[i] * n[i] && en >= 0) {
				int tmp = sum[0][st] + sum[1][en];

				if (tmp == k[i]) {
					result = tmp;
					break;
				} else if (tmp < k[i]) {
					if (Math.abs(k[i] - tmp) < Math.abs(k[i] - result)) {
						result = tmp;
					} else if (Math.abs(k[i] - tmp) == Math.abs(k[i] - result)) {
						result = Math.min(result, tmp);
					}
					st++;
				} else {
					if (Math.abs(k[i] - tmp) < Math.abs(k[i] - result)) {
						result = tmp;
					} else if (Math.abs(k[i] - tmp) == Math.abs(k[i] - result)) {
						result = Math.min(result, tmp);
					}
					en--;
				}
			}

			answer.append(result).append("\n");
		}

		System.out.println(answer);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}