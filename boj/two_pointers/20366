import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
	접근법
		가능한 합의 경우의 수를 모두 계산한다.
			같은 원소가 2번 포함되는 조합은 제외해야한다.
			같은 원소 => 합을 위한 두 원소가 존재할 때, 두 원소의 값이 모두 동일하다면, 둘 중 어떠한 원소라도 사용된 원소의 인덱스가 존재해서는 안됨.

*/
class Comb {
	int idxX;
	int idxY;
	int height;

	public Comb(int idxX, int idxY, int height) {
		this.idxX = idxX;
		this.idxY = idxY;
		this.height = height;
	}

	@Override
	public String toString() {
		return "Comb{" +
			"idxX=" + idxX +
			", idxY=" + idxY +
			", height=" + height +
			'}';
	}
}

public class Main {
	int N;
	int[] H;
	Comb[] heights;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		H = new int[N];
		heights = new Comb[N * N];

		StringTokenizer st = new StringTokenizer(br.readLine());

		for (int i = 0; i < N; i++) {
			H[i] = Integer.parseInt(st.nextToken());
		}

		for (int i = 0; i < N * N; i++) {
			heights[i] = new Comb(-1, -1, -1);
		}
	}

	public void solve() {
		int idx = 0;

		for (int i = 0; i < N; i++) {
			for (int j = i + 1; j < N; j++) {
				heights[idx++] = new Comb(i, j, H[i] + H[j]);
			}
		}

		Arrays.sort(heights, (h1, h2) -> h1.height - h2.height);
		int answer = Integer.MAX_VALUE;

		for (int i = N * N - N * (N - 1) / 2 + 1; i < N * N; i++) {
			if (isValid(heights[i-1], heights[i])) {
				answer = Math.min(answer, heights[i].height - heights[i-1].height);
			}
		}

		System.out.println(answer);
	}

	public boolean isValid(Comb comb1, Comb comb2) {
		if (comb1.idxX == comb2.idxX || comb1.idxY == comb2.idxY || comb1.idxX == comb2.idxY
			|| comb1.idxY == comb2.idxX) {
			return false;
		}

		return true;
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}