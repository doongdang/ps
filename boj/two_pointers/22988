import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
	접근법
		반 이상 채워진 용기를 많이 만드는 게 관건인 것 같은데..
		우선, 두 병의 내용물이 X/2 보다 작은 경우, 꽉 채우기 위해 3병이 필요하다.
		두 병의 내용물이 X/2보다 큰 경우, 꽉 채우기 위해 2병이 필요하다.
		병에 이미 꽉 차있는건 별도로 세는게 나을듯?

		일단 두 병의 합이 X/2보다 큰 경우를 모두 세서 삭제하고, 남은 원소의 개수를 통해서 추가?
		남은 원소는 두 병끼리 합해도 X/2가 될 수 없기 때문에 무조건 가득 채우려면 3병이 필요함
*/

public class Main {
	int N;
	long X;
	long[] C;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		X = Long.parseLong(st.nextToken());
		C = new long[N];
		st = new StringTokenizer(br.readLine());

		for (int i = 0; i < N; i++) {
			C[i] = Long.parseLong(st.nextToken());
		}
	}

	public void solve() {
		int answer = 0;
		Arrays.sort(C);
		int st = 0;
		int en = N - 1;

		for (int i = N - 1; i >= 0; i--) {
			if (C[i] != X) {
				break;
			}

			C[i] = -1;
			answer++;
			en--;
		}

		while (st < en) {
			long sum = C[st] + C[en];

			if (sum >= Math.ceil(X / 2.0)) {
				C[st] = -1;
				C[en] = -1;
				answer++;
				st++;
				en--;
			} else {
				st++;
			}
		}

		int remains = 0;

		for (int i = 0; i < N; i++) {
			if(C[i] != -1){
				remains++;
			}
		}

		answer += remains/3;

		// System.out.println(Math.ceil(X/2.0));
		// System.out.println(Arrays.toString(C));
		System.out.println(answer);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}