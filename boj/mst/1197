import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

//BOJ 1197
//해당 문제를 기반으로 Union - Find을 활용한 크루스칼 알고리즘 구현
class Tuple{
	int x;
	int y;
	int z;

	public Tuple(int x, int y, int z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
}
public class Main {
	static int[] p;

	public static int find(int v){ //find 연산
		if(p[v] == v) return v; //v의 대표 노드가 v인 경우 반환.
		return p[v] = find(p[v]); //v의 대표 노드를 찾을 때 까지 거쳐간 모든 노드의 대표 노드를 v의 대표노드로 설정.
	}

	public static boolean isDiffGroup(int u, int v){
		u = find(u);
		v = find(v);

		if(u == v) return false; //같은 그룹이다.
		if(p[u] < p[v]) p[v] = u; //더 작은 노드 번호를 대표 노드로 설정하여 연결
		else p[u] = v;
		return true;
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		int v = Integer.parseInt(st.nextToken());
		int e = Integer.parseInt(st.nextToken());

		int cnt = 0;
		int answer = 0;

		Tuple[] edge = new Tuple[e];
		p = new int[v+1];

		for (int i = 1; i <= v; i++) {
			p[i] = i;
		}

		for (int i = 0; i < e; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			edge[i] = new Tuple(c, a, b);
		}

		Arrays.sort(edge, (e1, e2) -> e1.x - e2.x); //간선의 가중치를 기준으로 간선 배열 정렬

		for (int i = 0; i < e; i++) {
			Tuple cur = edge[i];
			if(!isDiffGroup(cur.y, cur.z)) continue; //같은 그룹이 아니라면 Union연산을 통한 연결 후 반복문 처음으로 돌아감
			answer += cur.x; //간선의 가중치 더해주기.
			cnt++;
			if(cnt == v-1) break;
		}

		System.out.println(answer);

	}
}
