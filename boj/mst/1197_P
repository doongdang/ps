import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

//BOJ 1197
//해당 문제를 기반으로 우선순위 큐를 활용한 프림 알고리즘 구현
class Tuple{
	int x;
	int y;
	int z;

	public Tuple(int x, int y, int z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
}

class Pair{
	int x;
	int y;

	public Pair(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		int v = Integer.parseInt(st.nextToken());
		int e = Integer.parseInt(st.nextToken());

		int cnt = 0;
		int answer = 0;

		LinkedList<Pair>[] list = new LinkedList[v+1]; //인접 리스트로 나타낸 특정 정점 u에서 다른 정점 v로 이어지는 간선 가중치와 v를 저장할 테이블
		boolean[] check = new boolean[v+1]; //i번째 정점이 최소 신장 트리에 들어있는지 판독.

		for (int i = 0; i <=v; i++) {
			list[i] = new LinkedList<>();
		}



		for (int i = 0; i < e; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			list[a].add(new Pair(c, b));
			list[b].add(new Pair(c, a));
		}
		PriorityQueue<Tuple> pq = new PriorityQueue<>((t1, t2) -> t1.x -t2.x);

		check[1] = true; //임의의 한 정점(여기서는 1번 정점)을 최소 신장 트리에 추가

		for(Pair nxt : list[1]){
			pq.add(new Tuple(nxt.x, 1, nxt.y));
		}

		while(cnt < v-1){
			Tuple cur = pq.poll();
			if(check[cur.z]) continue;//만일 간선의 다른 쪽이 최소 신장 트리에 포함 되어있다면 건너뜀.
			check[cur.z] = true;
			answer += cur.x;
			cnt++;
			for(Pair nxt : list[cur.z]){
				pq.add(new Tuple(nxt.x, cur.z, nxt.y));
			}
		}

		System.out.println(answer);
	}
}
