import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	int T;
	int W;
	// int[][] time;
	// int[][][] dp;
	int[] time;
	int[][] dp;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		T = Integer.parseInt(st.nextToken());
		W = Integer.parseInt(st.nextToken());
		time = new int[T];
		dp = new int[T][W + 1];

		for (int i = 0; i < T; i++) {
			//비트 반전으로 위치 전환을 하기 위해 1, 2 를 0, 1로 만들어준다.
			// int loc = Integer.parseInt(br.readLine()) - 1;
			// time[i][loc] = 1;

			time[i] = Integer.parseInt(br.readLine()) - 1;
		}
	}

	public void solve() {
		// System.out.println(Math.max(topDown(0, 0, 0), topDown(0, 1, 1)));
		bottomUp();
	}

	/*
	백트래킹으로 접근

	void backTracking(int 현재 시간, int 위치 전환 횟수, int 현재 위치, int 현재까지 받은 자두 수) {
		if 위치 전환 횟수 > W :
			return
		if 현재 시간 == T+1 :
			ans = max(ans, 현재까지 받은 자두 수)

		위치 전환을 하는 경우
		backTracking(현재 시간 + 1, 위치 전환 횟수 + 1, 현재 위치 ^ 1, 자두 수 + 시간[현재위치])

		위치 전환을 하지 않는 경우
		backTracking(현재 시간 + 1, 위치 전환 횟수, 현재 위치, 자두 수 + 시간[현재 위치])
	}
*/

	// public int topDown(int curTIme, int curLoc, int changeCnt) {
	// 	if (changeCnt > W) {
	// 		return Integer.MIN_VALUE;
	// 	}
	//
	// 	if (curTIme == T) {
	// 		return 0;
	// 	}
	//
	// 	if (dp[curTIme][curLoc][changeCnt] != -1) {
	// 		return dp[curTIme][curLoc][changeCnt];
	// 	}
	//
	// 	int val = -1;
	//
	// 	val = Math.max(topDown(curTIme + 1, curLoc, changeCnt), topDown(curTIme + 1, curLoc ^ 1, changeCnt + 1))
	// 		+ time[curTIme][curLoc];
	//
	// 	dp[curTIme][curLoc][changeCnt] = val;
	//
	// 	return dp[curTIme][curLoc][changeCnt];
	// }

	public void bottomUp() {
		dp[0][0] = time[0] == 0 ? 1 : 0;
		dp[0][1] = time[0] == 1 ? 1 : 0;

		for (int i = 1; i < T; i++) {
			for (int j = 0; j < W + 1; j++) {
				if (j == 0) {
					dp[i][j] = dp[i - 1][j];
					if (time[i] == 0) {
						dp[i][j] += 1;
					}
				} else {
					dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - 1]);
					if (time[i] == j % 2) {
						dp[i][j] += 1;
					}
				}
			}
		}

		System.out.println(Arrays.stream(dp[T - 1]).max().getAsInt());
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}