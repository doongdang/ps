import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	int n;
	int[][] forest;
	int[][] dp;
	int[] dx;
	int[] dy;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		n = Integer.parseInt(br.readLine());
		forest = new int[n][n];
		dp = new int[n][n];
		dx = new int[]{1, 0, -1, 0};
		dy = new int[]{0, 1, 0, -1};

		for (int i = 0; i < n; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < n; j++) {
				forest[i][j] = Integer.parseInt(st.nextToken());
				dp[i][j] = -1;
			}
		}
	}

	public void solve() {
		int answer = 0;

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				answer = Math.max(recursion(i, j), answer);
			}
		}

		answer += 1;

		System.out.println(answer);
	}

	public int recursion(int x, int y){
		if(dp[x][y] != -1){
			return dp[x][y];
		}

		int val = 0;

		for (int dir = 0; dir < 4; dir++) {
			int nx = x + dx[dir];
			int ny = y + dy[dir];
			if (nx < 0 || ny < 0 || nx >= n || ny >= n) continue;
			if (forest[nx][ny] <= forest[x][y]) continue;
			val = Math.max(val, recursion(nx, ny) + 1);
		}

		dp[x][y] = val;

		return dp[x][y];
	}


	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}