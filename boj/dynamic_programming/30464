import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	int N;
	int[] roads;
	int[][] dp;
	boolean isReached;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		roads = new int[N];
		dp = new int[N][3];

		StringTokenizer st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			roads[i] = Integer.parseInt(st.nextToken());
			Arrays.fill(dp[i], Integer.MIN_VALUE);
		}
	}

	public void solve() {
		recursion(0, 0);

		if (isReached) {
			System.out.println(dp[0][0]);
		} else {
			System.out.println(-1);
		}
	}

	public int recursion(int cur, int changeDir) {
		if (cur >= N || cur < 0 || changeDir > 2) {
			return Integer.MIN_VALUE;
		}

		if (cur == N - 1) {
			isReached = true;
			return 0;
		}

		if (roads[cur] == 0) {
			return Integer.MIN_VALUE;
		}

		if (dp[cur][changeDir] != Integer.MIN_VALUE) {
			return dp[cur][changeDir];
		}

		int time = Integer.MIN_VALUE;

		if (changeDir % 2 == 0) {
			//전진
			time = Math.max(time, recursion(cur + roads[cur], changeDir) + 1);

			//후진
			time = Math.max(time, recursion(cur - roads[cur], changeDir + 1) + 1);

		} else {
			//전진
			time = Math.max(time, recursion(cur - roads[cur], changeDir) + 1);

			//후진
			time = Math.max(time, recursion(cur + roads[cur], changeDir + 1) + 1);
		}

		dp[cur][changeDir] = time;

		return dp[cur][changeDir];
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}