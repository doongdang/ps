import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Coordinate {
	int x;
	int y;

	public Coordinate(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {
	int N;
	int[][] board;
	int[][][][] dp;
	int[] dx = {1, 1, 1, 0};
	int[] dy = {-1, 1, 0, 1};

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		board = new int[N][N];
		dp = new int[N][N][4][2];

		for (int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				board[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		// for (int i = 0; i < N; i++) {
		// 	for (int j = 0; j < N; j++) {
		// 		for (int k = 0; k < 4; k++) {
		// 			for (int l = 0; l < 2; l++) {
		// 				dp[i][j][k][l] = -1;
		// 			}
		// 		}
		// 	}
		// }
	}

	public void solve() {
		bottomUp();
		// int answer = 0;
		//
		// for (int x = N-1; x >= 0; x--) {
		// 	for (int y = N-1; y >= 0; y--) {
		// 		for (int dir = 0; dir < 4; dir++) {
		// 			if(board[x][y] != 0){
		// 				answer = Math.max(answer, topDown(x, y, dir, 0));
		// 			}
		// 		}
		// 	}
		// }
		//
		// System.out.println(answer);
	}

	/*
		topDown 접근법?
		=> 바둑판의 좌상단부터 우하단으로 탐색을 실시하면 방향은 우, 하, 좌하, 우하 4가지로 길이를 측정이 가능하다.

	*/

	public int topDown(int x, int y, int dir, int change) {
		if (x >= N || y >= N || x < 0 || y < 0 || board[x][y] == 0) {
			return 0;
		}

		if (board[x][y] == 2 && change == 1) {
			return 0;
		}

		if (dp[x][y][dir][change] != -1) {
			return dp[x][y][dir][change];
		}

		if (board[x][y] == 1) {
			dp[x][y][dir][change] = Math.max(dp[x][y][dir][change], topDown(x + dx[dir], y + dy[dir], dir, change) + 1);
		} else {
			dp[x][y][dir][change] = Math.max(dp[x][y][dir][change], topDown(x + dx[dir], y + dy[dir], dir, 1) + 1);
		}

		return dp[x][y][dir][change];
	}

	public void bottomUp() {
		int answer = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				for (int k = 0; k < 4; k++) {
					if (board[i][j] == 1) {
						dp[i][j][k][0] = 1;
						dp[i][j][k][1] = 1;
					} else if (board[i][j] == 2) {
						dp[i][j][k][0] = 1;
					}
				}
			}
		}

		for (int i = N - 1; i >= 0; i--) {
			for (int j = N - 1; j >= 0; j--) {
				for (int k = 0; k < 4; k++) {
					if (i + dx[k] >= N || j + dy[k] >= N || j + dy[k] < 0 || board[i + dx[k]][j + dy[k]] == 0) continue;
					if (board[i + dx[k]][j + dy[k]] == 1) {
						dp[i][j][k][0] += dp[i + dx[k]][j + dy[k]][k][0];
						dp[i][j][k][1] += dp[i + dx[k]][j + dy[k]][k][1];
					} else {
						dp[i][j][k][1] += dp[i + dx[k]][j + dy[k]][k][0];
					}
				}
			}
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				for (int k = 0; k < 4; k++) {
					for (int l = 0; l < 2; l++) {
						answer = Math.max(answer, dp[i][j][k][l]);
					}
				}
			}
		}

		System.out.println(answer);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}