import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int[][] house;
	static int N;
	static int answer = 0;

	public static boolean isInbound(int x, int y){
		return x >= 0 && y >= 0 && x < N && y < N;
	}
	public static void recursion(int x, int y, int dir){
		if(x == N-1 && y == N-1 && house[x][y] == 0){
			answer++;
			return;
		}

		if(dir == 0){ //가로
			if(isInbound(x, y+1) && house[x][y+1] == 0) recursion(x, y+1, 0);
			if(isInbound(x+1, y+1) && house[x+1][y+1] == 0 && house[x+1][y] == 0 && house[x][y+1] == 0) recursion(x+1, y+1, 1);
		}else if(dir == 1){ //대각선
			if(isInbound(x, y+1) && house[x][y+1] == 0) recursion(x, y+1, 0);
			if(isInbound(x+1, y+1) && house[x+1][y+1] == 0 && house[x+1][y] == 0 && house[x][y+1] == 0) recursion(x+1, y+1, 1);
			if(isInbound(x+1, y) && house[x+1][y] == 0)recursion(x+1, y, 2);

		}else{ //세로
			if(isInbound(x+1, y+1) && house[x+1][y+1] == 0 && house[x+1][y] == 0 && house[x][y+1] == 0) recursion(x+1, y+1, 1);
			if(isInbound(x+1, y) && house[x+1][y] == 0)recursion(x+1, y, 2);
		}

	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		N = Integer.parseInt(br.readLine());
		house = new int[N][N];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				house[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		recursion(0, 1, 0);

		System.out.println(answer);
	}
}