import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	int N;
	int maxCnt;
	int[] trains;
	int[][] dp;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		trains = new int[N+1];
		dp = new int[N+1][4];

		StringTokenizer st = new StringTokenizer(br.readLine());

		for (int i = 1; i <= N; i++) {
			trains[i] = Integer.parseInt(st.nextToken());
		}

		for (int i = 1; i <= N; i++) {
			trains[i] += trains[i - 1];
		}

		maxCnt = Integer.parseInt(br.readLine());

		for (int i = 0; i <= N; i++) {
			Arrays.fill(dp[i], Integer.MIN_VALUE);
		}
	}

	public void solve() {
		System.out.println(recursion(1, 0));
	}

	public int recursion(int cur, int peekCnt) {
		if(peekCnt > 3)
			return Integer.MIN_VALUE;

		if(cur + maxCnt > N+1){
			return 0;
		}

		if(dp[cur][peekCnt] != Integer.MIN_VALUE){
			return dp[cur][peekCnt];
		}

		dp[cur][peekCnt] = Math.max(recursion(cur + 1, peekCnt), recursion(cur + maxCnt, peekCnt+1) + trains[cur + maxCnt -1] - trains[cur-1]);

		return dp[cur][peekCnt];
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}