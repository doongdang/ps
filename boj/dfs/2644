import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;

/*
	접근법

*/

public class Main {
	int n;
	int m;
	int targetA;
	int targetB;
	List<Integer>[] adjList;
	int[] dist;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine());
		targetA = Integer.parseInt(st.nextToken());
		targetB = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(br.readLine());
		adjList = new List[n + 1];
		dist = new int[n + 1];
		Arrays.fill(dist, -1);

		for (int i = 1; i <= n; i++) {
			adjList[i] = new LinkedList<>();
		}

		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			adjList[x].add(y);
			adjList[y].add(x);
		}
	}

	public void solve() {
		dist[targetA] = 0;
		dfs(targetA);
		System.out.println(dist[targetB]);
	}

	public void dfs(int cur) {
		for (Integer nxt : adjList[cur]) {
			if (dist[nxt] == -1) {
				dist[nxt] = dist[cur] + 1;

				if (nxt == targetB) {
					return;
				}
				dfs(nxt);
			}
		}
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}