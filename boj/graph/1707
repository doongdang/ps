import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int K = Integer.parseInt(br.readLine());

		while(K > 0){
			st = new StringTokenizer(br.readLine());
			int V = Integer.parseInt(st.nextToken());
			int E = Integer.parseInt(st.nextToken());

			int[] color = new int[V+1];
			LinkedList<Integer>[] adj = new LinkedList[V+1];

			for (int i = 1; i <= V; i++) {
				adj[i] = new LinkedList<>();
			}

			for (int i = 0; i < E; i++) {
				st = new StringTokenizer(br.readLine());
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				adj[a].add(b);
				adj[b].add(a);
			}
			boolean isBinary = true;

			Loop1:
			for (int i = 1; i <= V; i++) {
				if(color[i] != 0){
					continue;
				}
				Queue<Integer> queue = new LinkedList<>();
				queue.offer(i);
				color[i] = 1;

				while(!queue.isEmpty()){
					int cur = queue.poll();

					for(int nxt : adj[cur]){
						if(color[nxt] == 0){
							queue.offer(nxt);
							if(color[cur] == 1){
								color[nxt] = 2;
							}else{
								color[nxt] = 1;
							}
						}else{
							if(color[nxt] == color[cur]){
								System.out.println("NO");
								isBinary = false;
								break Loop1;
							}
						}
					}
				}
			}

			if(isBinary){
				System.out.println("YES");
			}

			K--;
		}

	}
}
