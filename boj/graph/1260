import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int N;
	static int M;
	static int V;
	static int[][] adj;
	static boolean[] vis;

	static StringBuilder forDfs = new StringBuilder();
	static StringBuilder forBfs = new StringBuilder();

	static void dfs(int cur){
		for (int i = 1; i <= N; i++) {
			if(!vis[i] && adj[cur][i] != 0){
				vis[i] = true;
				forDfs.append(i);
				forDfs.append(" ");
				dfs(i);
			}
		}

	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		V = Integer.parseInt(st.nextToken());

		adj = new int[N+1][N+1];
		vis = new boolean[N+1];

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());

			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());

			adj[a][b] = 1;
			adj[b][a] = 1;
		}

		forDfs.append(V);
		forDfs.append(" ");
		forBfs.append(V);
		forBfs.append(" ");

		vis[V] = true;
		dfs(V);

		Arrays.fill(vis, false);

		Queue<Integer> queue = new LinkedList<>();
		queue.offer(V);
		vis[V] = true;

		while (!queue.isEmpty()){
			int cur = queue.poll();

			for (int i = 1; i <= N; i++) {
				if(!vis[i] && adj[cur][i] != 0){
					vis[i] = true;
					forBfs.append(i);
					forBfs.append(" ");
					queue.offer(i);
				}
			}
		}

		System.out.println(forDfs);
		System.out.println(forBfs);

	}
}
