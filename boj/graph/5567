import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Pair{
	int node;
	int dist;
	public Pair(int node, int dist){
		this.node = node;
		this.dist = dist;
	}
}
public class Main {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int n = Integer.parseInt(br.readLine());
		int m = Integer.parseInt(br.readLine());

		LinkedList<Pair>[] adj = new LinkedList[n + 1];
		boolean[] vis = new boolean[n + 1];
		int ans = 0;

		for (int i = 1; i <= n; i++) {
			adj[i] = new LinkedList<>();
		}

		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());

			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			adj[a].add(new Pair(b, 1));
			adj[b].add(new Pair(a, 1));
		}

		Queue<Pair> queue = new LinkedList<>();
		vis[1] = true;
		queue.offer(new Pair(1, 0));

		while (!queue.isEmpty()) {
			Pair cur = queue.poll();
			if(cur.dist == 2){
				break;
			}

			for (Pair nxt : adj[cur.node]) {
				if (!vis[nxt.node]) {
					vis[nxt.node] = true;
					queue.offer(new Pair(nxt.node, cur.dist+1));
					ans++;

				}
			}
		}
		System.out.println(ans);
	}
}
