import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

class jewelry{
	int m;
	int v;

	public jewelry(int m, int v) {
		this.m = m;
		this.v = v;
	}
}

public class Main {
	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		int n = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		int idx = 0;
		long ans = 0;

		ArrayList<jewelry> list = new ArrayList<>();
		int[] bag = new int[k];

		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			int m = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());

			list.add(new jewelry(m,v));
		}

		list.sort((j1, j2) -> j1.m - j2.m);

		for (int i = 0; i < k; i++) {
			int c = Integer.parseInt(br.readLine());
			bag[i] = c;
		}

		Arrays.sort(bag);

		PriorityQueue<jewelry> pq = new PriorityQueue<>((j1, j2) -> j2.v - j1.v);

		for (int i = 0; i < k; i++) {
			int maxV = 0;
			while (idx < n && list.get(idx).m <= bag[i]) {
				jewelry cur = list.get(idx++);
				if(cur.m <= bag[i]){
					pq.add(cur);
				}
			}
			if(!pq.isEmpty()){
				ans += pq.poll().v;
			}
		}
		System.out.println(ans);
	}
}
