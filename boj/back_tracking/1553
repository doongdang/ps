import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	boolean[][] isUsed;
	boolean[][] isFilled;
	int[][] board;
	int answer;
	int[][] nxt;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		isUsed = new boolean[7][7];
		isFilled = new boolean[8][7];
		board = new int[8][7];
		nxt = new int[][] {{0, 1}, {1, 0}};

		for (int i = 0; i < 8; i++) {
			char[] ch = br.readLine().toCharArray();
			for (int j = 0; j < 7; j++) {
				board[i][j] = ch[j] - '0';
			}
		}
	}

	public void solve() {
		recursion(0, 0);
		System.out.println(answer);
	}

	public void recursion(int x, int y) {
		if (y == 7) {
			x += 1;
			y = 0;
		}

		if (x == 8) {
			answer++;
			return;
		}

		if (isFilled[x][y]) {
			recursion(x, y + 1);
		} else {
			for (int dir = 0; dir < 2; dir++) {
				int nx = x + nxt[dir][0];
				int ny = y + nxt[dir][1];

				if (nx >= 8 || ny >= 7) continue;
				if (isFilled[nx][ny]) continue;
				if (isUsed[board[x][y]][board[nx][ny]]) continue;

				isUsed[board[x][y]][board[nx][ny]] = true;
				isUsed[board[nx][ny]][board[x][y]] = true;
				isFilled[x][y] = true;
				isFilled[nx][ny] = true;
				recursion(x, y + 1);
				isUsed[board[x][y]][board[nx][ny]] = false;
				isUsed[board[nx][ny]][board[x][y]] = false;
				isFilled[x][y] = false;
				isFilled[nx][ny] = false;
			}
		}
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}