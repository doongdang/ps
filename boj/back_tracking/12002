import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;

class Coordinate{
	int x;
	int y;

	public Coordinate(int x, int y) {
		this.x = x;
		this.y = y;
	}

	@Override
	public boolean equals(Object o) {
		Coordinate coordinate = (Coordinate)o;
		return x == coordinate.x && y == coordinate.y;
	}
}

public class Main {
	int N;
	Coordinate[] coordinates;
	List<Coordinate> candidates;
	Set<Coordinate> isRemoved;
	int answer;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		coordinates = new Coordinate[N];
		candidates = new ArrayList<>();
		answer = Integer.MAX_VALUE;
		isRemoved = new HashSet<>();

		for (int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			coordinates[i] = new Coordinate(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
		}

		Arrays.sort(coordinates, (c1, c2) -> c1.x - c2.x);
		addEndpoint();

		Arrays.sort(coordinates, (c1, c2) -> c1.y - c2.y);
		addEndpoint();
	}

	public void addEndpoint(){
		for (int i = 0; i < 3; i++) {
			if(candidates.contains(coordinates[i])) continue;
			candidates.add(coordinates[i]);
		}

		for (int i = 0; i < 3; i++) {
			if(candidates.contains(coordinates[N-1-i])) continue;
			candidates.add(coordinates[N-1-i]);
		}
	}

	public void solve() {
		recursion(0, 0);
		System.out.println(answer);
	}

	public void recursion(int cur, int selected) {
		if(selected > 3) return;
		if(cur == candidates.size()) {
			int minX = Integer.MAX_VALUE;
			int minY = Integer.MAX_VALUE;
			int maxX = Integer.MIN_VALUE;
			int maxY = Integer.MIN_VALUE;

			for (Coordinate coordinate : coordinates) {
				if (isRemoved.contains(coordinate)) continue;
				minX = Math.min(minX, coordinate.x);
				minY = Math.min(minY, coordinate.y);
				maxX = Math.max(maxX, coordinate.x);
				maxY = Math.max(maxY, coordinate.y);
			}

			answer = Math.min(answer, (maxX - minX) * (maxY - minY));
			return;
		}

		recursion(cur + 1, selected);

		isRemoved.add(candidates.get(cur));
		recursion(cur + 1, selected + 1);
		isRemoved.remove(candidates.get(cur));
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}