import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

class Ingredient{
	int protein;
	int fat;
	int carbohydrate;
	int vitamin;
	int price;

	public Ingredient(int protein, int fat, int carbohydrate, int vitamin, int price) {
		this.protein = protein;
		this.fat = fat;
		this.carbohydrate = carbohydrate;
		this.vitamin = vitamin;
		this.price = price;
	}
}

public class Main {
	int N;
	Ingredient[] ingredients;
	int[] selected;
	int minPrice;
	int mp, mf, mc, mv;
	List<Integer> answer;
	int sumOfPrice;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		N = Integer.parseInt(br.readLine());
		ingredients = new Ingredient[N];
		selected = new int[N];
		minPrice = Integer.MAX_VALUE;
		answer = new ArrayList<>();

		Arrays.fill(selected, -1);

		StringTokenizer st = new StringTokenizer(br.readLine());

		mp = Integer.parseInt(st.nextToken());
		mf = Integer.parseInt(st.nextToken());
		mc = Integer.parseInt(st.nextToken());
		mv = Integer.parseInt(st.nextToken());

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			ingredients[i] = new Ingredient(
				Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())
			);
		}
	}

	public void recursion(int cur){
		if(sumOfPrice > minPrice) return;

		check();

		if(cur == N){
			return;
		}

		selected[cur] = cur;
		sumOfPrice += ingredients[cur].price;
		recursion(cur+1);
		selected[cur] = -1;
		sumOfPrice -= ingredients[cur].price;

		recursion(cur+1);
	}

	public void check(){
		int sp = 0;
		int sf = 0;
		int sc = 0;
		int sv = 0;
		List<Integer> comb = new ArrayList<>();
		for (int i = 0; i < N; i++) {
			if(selected[i] == -1) continue;
			comb.add(selected[i]+1);
			sp += ingredients[selected[i]].protein;
			sf += ingredients[selected[i]].fat;
			sc += ingredients[selected[i]].carbohydrate;
			sv += ingredients[selected[i]].vitamin;
		}

		if(sp >= mp && sf >= mf && sc >= mc && sv >= mv) {
			if(minPrice > sumOfPrice){
				answer = comb;
				minPrice = sumOfPrice;
			}
		}
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.recursion(0);

		if(m.minPrice == Integer.MAX_VALUE){
			System.out.println(-1);
			return;
		}

		System.out.println(m.minPrice);

		for (Integer i : m.answer) {
			System.out.print(i + " ");
		}
	}
}