import java.io.*;
import java.util.*;

public class Main {
	static int N;
	static int[][] arr;
	static boolean[] choice;
	static int ans = Integer.MAX_VALUE;
	public static void dfs(int idx, int cnt) {
		if(cnt == N/2) {
			int idx1 = 0;
			int idx2 = 0;
			int[] team1 = new int[N/2];
			int[] team2 = new int[N/2];
			
			for(int i = 0; i < N; i++) {
				if(choice[i]) {
					team1[idx1++] = i; 
				}else {
					team2[idx2++] = i;
				}
			}
			
			int sum1 = 0;
			int sum2 = 0;
			
			for(int member : team1) {
				for(int member2 : team1) {
					sum1 += arr[member][member2];
				}
			}
			
			for(int member : team2) {
				for(int member2 : team2) {
					sum2 += arr[member][member2];
				}
			}
			
			ans = Math.min(ans, Math.abs(sum1-sum2));
			return;
		}
		
		for(int i = idx; i < N; i++) {
			choice[i] = true;
			dfs(i+1, cnt+1);
			choice[i] = false;
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();
		
		st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		arr = new int[N][N];
		choice = new boolean[N];
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < N; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		dfs(0, 0);
		System.out.println(ans);
	}
}
