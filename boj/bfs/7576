import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

/*
	접근법

*/

class Pair {
	int x;
	int y;

	public Pair(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {
	int N, M;
	int[] dx = {-1, 0, 1, 0};
	int[] dy = {0, 1, 0, -1};
	int[][] warehouse;
	int[][] dist;
	Queue<Pair> ripeList;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		warehouse = new int[N][M];
		dist = new int[N][M];
		ripeList = new LinkedList<>();

		for (int i = 0; i < N; i++) {
			Arrays.fill(dist[i], -1);
		}

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());

			for (int j = 0; j < M; j++) {
				warehouse[i][j] = Integer.parseInt(st.nextToken());

				if (warehouse[i][j] == 1) {
					dist[i][j] = 0;
					ripeList.add(new Pair(i, j));
				}
			}
		}
	}

	public void solve() {
		while (!ripeList.isEmpty()) {
			Pair cur = ripeList.poll();

			for (int dir = 0; dir < 4; dir++) {
				int nx = cur.x + dx[dir];
				int ny = cur.y + dy[dir];

				if (!isInBound(nx, ny) || !isValid(nx, ny))
					continue;

				dist[nx][ny] = dist[cur.x][cur.y] + 1;
				ripeList.add(new Pair(nx, ny));
			}
		}

		int answer = 0;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(dist[i][j] == -1 && warehouse[i][j] == 0){
					System.out.println(-1);
					return;
				}

				answer = Math.max(answer, dist[i][j]);
			}
		}

		System.out.println(answer);
	}

	public boolean isInBound(int x, int y) {
		return x >= 0 && x < N && y >= 0 && y < M;
	}

	public boolean isValid(int x, int y) {
		return dist[x][y] == -1 && warehouse[x][y] != -1;
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}