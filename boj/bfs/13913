import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main {
	static int[][] dist;
	static int N;
	static StringBuilder sb = new StringBuilder();
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());

		dist = new int[100001][2];
		int[] dx = {-1, 1, 2};
		Queue<Integer> queue = new LinkedList<>();

		for (int i = 0; i < 100001; i++) {
			dist[i][1] = -1;
		}

		dist[N][0] = 0;
		dist[N][1] = 0;
		queue.offer(N);

		if(N == K){
			System.out.println(0);
			System.out.println(N);
			return;
		}

		while(!queue.isEmpty()){
			int cur = queue.poll();
			for (int dir = 0; dir < 3; dir++) {
				int nx;
				if(dx[dir] == 2){
					nx = cur*2;
				}else{
					nx = cur + dx[dir];
				}
				if(nx < 0 || nx > 100000) continue;
				if(dist[nx][1] > 0) continue;
				dist[nx][0] = cur;
				dist[nx][1] = dist[cur][1] + 1;
				queue.offer(nx);
			}

		}
		System.out.println(dist[K][1]);
		int idx = K;
		Stack<Integer> stack = new Stack<>();
		while(idx != N){
			stack.push(dist[idx][0]);
			idx = dist[idx][0];
		}

		while(!stack.isEmpty()){
			sb.append(stack.pop()).append(" ");
		}
		System.out.println(sb.toString() + K);
	}
}
