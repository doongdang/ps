import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());

		int[][] adj = new int[n+1][n+1];

		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());

			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());

			adj[x][y] = 1;
			adj[y][x] = 1;
		}

		int q = Integer.parseInt(br.readLine());

		boolean[] vis;
		int[][] dist = new int[q][n+1];

		for (int i = 0; i < q; i++) {
			Arrays.fill(dist[i], -1);
		}

		for (int i = 0; i < q; i++) {
			dist[i][1] = 0;
		}

		for (int i = 0; i < q; i++) {
			 vis = new boolean[n+1];

			st = new StringTokenizer(br.readLine());

			int a = Integer.parseInt(st.nextToken());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());

			if(a == 1){
				adj[x][y] = 1;
				adj[y][x] = 1;
			}else{
				adj[x][y] = 0;
				adj[y][x] = 0;
			}

			Queue<Integer> queue = new LinkedList<>();
			vis[1] = true;
			queue.offer(1);



			while(!queue.isEmpty()){
				int cur  = queue.poll();

				for (int j = 1; j <= n; j++) {
					if(vis[j]) continue;
					if(adj[cur][j] == 0) continue;

					dist[i][j] = dist[i][cur] + 1;
					vis[j] = true;
					queue.offer(j);
				}
			}
		}

		for (int i = 0; i < q; i++) {
			for (int j = 1; j <= n; j++) {
				sb.append(dist[i][j]).append(" ");
			}
			sb.append("\n");
		}

		System.out.println(sb);
	}
}
