import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

/*
	목표 :

	조건 :

	접근 :

*/

public class Main {
	int R, C;
	char[][] board;
	boolean[][] visited;
	int[] dx = {-1, 0, 1, 0};
	int[] dy = {0, -1, 0, 1};
	int liveSheep, liveWolf;


	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		board = new char[R][C];
		visited = new boolean[R][C];

		for (int i = 0; i < R; i++) {
			board[i] = br.readLine().toCharArray();
		}
	}

	public void solve() {
		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				if(!visited[i][j] && board[i][j] != '#') {
					bfs(i, j);
				}
			}
		}

		System.out.println(liveSheep + " " + liveWolf);
	}

	private void bfs(int x, int y) {
		Queue<int[]> queue = new LinkedList<>();
		visited[x][y] = true;
		queue.add(new int[]{x, y});
		int curSheep = 0;
		int curWolf = 0;

		if(board[x][y] == 'v') curWolf++;
		if(board[x][y] == 'k') curSheep++;

		while (!queue.isEmpty()) {
			int[] cur = queue.poll();

			for (int dir = 0; dir < 4; dir++) {
				int nx = cur[0] + dx[dir];
				int ny = cur[1] + dy[dir];

				if(nx < 0 || ny < 0 || nx >= R || ny >= C) continue;
				if(board[nx][ny] == '#' || visited[nx][ny]) continue;

				if(board[nx][ny] == 'v') curWolf++;
				if(board[nx][ny] == 'k') curSheep++;
				visited[nx][ny] = true;
				queue.add(new int[]{nx, ny});
			}
		}

		if(curSheep > curWolf) {
			liveSheep += curSheep;
		}else{
			liveWolf += curWolf;
		}
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}