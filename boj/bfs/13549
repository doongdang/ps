import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int[] dist;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		int answer = Integer.MAX_VALUE;

		dist = new int[100001];
		boolean[] vis = new boolean[100001];
		int[] dx = {-1, 1};
		Queue<Integer> queue = new LinkedList<>();

		dist[N] = 0;
		vis[N] = true;
		queue.offer(N);

		while(!queue.isEmpty()){
			int cur = queue.poll();
			if(cur == K){
				answer = Math.min(answer, dist[K]);
			}
			if(cur * 2 < 100001 && !vis[cur*2]){//이동 비용이 가장 낮은 2배수부터 큐에 삽입한다.
				dist[cur*2] = dist[cur];
				vis[cur*2] = true;
				queue.offer(cur*2);
			}
			if(cur -1 >= 0 && !vis[cur-1]){
				dist[cur-1] = dist[cur]+1;
				vis[cur-1] = true;
				queue.offer(cur-1);
			}
			if(cur+1 < 100001 && !vis[cur+1]){
				dist[cur+1] = dist[cur]+1;
				vis[cur+1] = true;
				queue.offer(cur+1);
			}
		}
		System.out.println(dist[K]);
	}
}
