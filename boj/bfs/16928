import java.io.*;
import java.util.*;

class Pair{
	int x;
	int y;
	public Pair(int x, int y){
		this.x = x;
		this.y = y;
	}
}

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();

		st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		int[][] board = new int[10][10];

		for (int i = 0; i < 10; i++) {
			Arrays.fill(board[i], -1);
		}

		HashMap<Integer, Integer> ladders = new HashMap<>();
		HashMap<Integer, Integer> snakes = new HashMap<>();

		for(int i = 0; i < N; i++){
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());

			ladders.put(x, y);
		}

		for(int i = 0; i < M; i++){
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());

			snakes.put(u, v);
		}

		Queue<Pair> queue = new LinkedList<>();
		board[0][0] = 0;
		queue.offer(new Pair(0, 0));

		while(!queue.isEmpty()){
			Pair cur = queue.poll();

			if(cur.x == 9 && cur.y == 9){
				System.out.println(board[9][9]);
				System.exit(0);
			}

			int num = cur.x*10 + cur.y+1;

			for(int i = 1; i <= 6; i++){
				int nxt = num + i;
				if(nxt > 100) continue;
				if(board[(nxt-1)/10][(nxt-1)%10] != -1) continue;
				board[(nxt-1)/10][(nxt-1)%10] = board[cur.x][cur.y] + 1;
				if(!ladders.containsKey(nxt) && !snakes.containsKey(nxt)) queue.offer(new Pair((nxt-1)/10, (nxt-1)%10));
				if(ladders.containsKey(nxt) && board[(ladders.get(nxt)-1)/10][(ladders.get(nxt)-1)%10] == -1){
					board[(ladders.get(nxt)-1)/10][(ladders.get(nxt)-1)%10] = board[(nxt-1)/10][(nxt-1)%10];
					queue.offer(new Pair((ladders.get(nxt)-1)/10, (ladders.get(nxt)-1)%10));
				}

				if(snakes.containsKey(nxt) && board[(snakes.get(nxt)-1)/10][(snakes.get(nxt)-1)%10] == -1){
					board[(snakes.get(nxt)-1)/10][(snakes.get(nxt)-1)%10] = board[(nxt-1)/10][(nxt-1)%10];
					queue.offer(new Pair((snakes.get(nxt)-1)/10, (snakes.get(nxt)-1)%10));
				}
			}



		}
	}
}