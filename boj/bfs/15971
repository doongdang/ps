import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

class Pair {
    int dest;
    int val;

    public Pair(int dest, int val) {
        this.dest = dest;
        this.val = val;
    }
}

public class Main {

    int N;
    int A;
    int B;

    List<int[]> coordList;

    List<Pair>[] adj;
    int[] distA;
    int[] distB;

    Queue<Pair> queueA;
    Queue<Pair> queueB;

    public void init() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        A = Integer.parseInt(st.nextToken());
        B = Integer.parseInt(st.nextToken());

        adj = new ArrayList[N + 1];
        distA = new int[N + 1];
        distB = new int[N + 1];
        coordList = new ArrayList<>();

        Arrays.fill(distA, -1);
        Arrays.fill(distB, -1);

        distA[A] = 0;
        distB[B] = 0;

        for (int i = 1; i <= N; i++) {
            adj[i] = new ArrayList<>();
        }

        for (int i = 0; i < N-1; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());

            adj[a].add(new Pair(b, c));
            adj[b].add(new Pair(a, c));

            coordList.add(new int[]{a, b});
        }

        queueA = new ArrayDeque<>();
        queueB = new ArrayDeque<>();

        queueA.offer(new Pair(A, 0));
        queueB.offer(new Pair(B, 0));
    }


    public void bfs(Queue<Pair> queue, boolean isA){
        int[] dist = isA ? distA : distB;

        while(!queue.isEmpty()){
            Pair cur = queue.poll();

            for (Pair nxt : adj[cur.dest]) {
                if(dist[nxt.dest] != -1) continue;
                dist[nxt.dest] = cur.val + nxt.val;
                queue.offer(new Pair(nxt.dest, dist[nxt.dest]));
            }
        }
    }

    public int checkDist(){
        int minVal = Integer.MAX_VALUE;

        for (int[] coord : coordList) {
            minVal = Math.min(Math.min(distA[coord[0]] + distB[coord[1]], distA[coord[1]] + distB[coord[0]]), minVal);
        }

        return minVal;
    }


    public static void main(String[] args) throws IOException {
        Main main = new Main();

        main.init();
        main.bfs(main.queueA, true);
        main.bfs(main.queueB, false);

        int answer = main.A == main.B ? 0 : main.checkDist();

        System.out.println(answer);
    }
}
