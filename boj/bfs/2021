import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int L = Integer.parseInt(st.nextToken());

		HashSet<Integer>[] lines = new HashSet[L];
		int[] dist = new int[L];
		boolean[] visited = new boolean[N+1];
		ArrayList<Integer>[] stations = new ArrayList[N+1];

		for(int i = 1; i <= N; i++){
			stations[i] = new ArrayList<>();
		}

		Arrays.fill(dist, -1);


		for (int i = 0; i < L; i++) {
			String[] cs = br.readLine().split(" ");
			lines[i] = new HashSet<>();
			for (int j = 0; j < cs.length-1; j++) {
				int station = Integer.parseInt(cs[j]);
				stations[station].add(i);
				lines[i].add(station);
			}
		}

		st = new StringTokenizer(br.readLine());

		int start = Integer.parseInt(st.nextToken());
		int destination = Integer.parseInt(st.nextToken());
		Queue<Integer> queue = new LinkedList<>();

		for (int i = 0; i < L; i++){
			if(lines[i].contains(start)){
				queue.offer(i);
				dist[i] = 0;
			}
		}
		visited[start] = true;
		while(!queue.isEmpty()){
			int curLine = queue.poll();
			if(lines[curLine].contains(destination)){
				System.out.println(dist[curLine]);
				System.exit(0);
			}
			for(int station : lines[curLine]){
				if(visited[station]) continue;
				visited[station] = true;
				for(int line : stations[station]){
					if(dist[line] != -1) continue;
					dist[line] = dist[curLine]+1;
					queue.offer(line);
				}
			}
		}
		System.out.println(-1);
	}
}
