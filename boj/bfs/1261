import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

/*
	접근법
		방문과 부순 횟수를 별도로 확인한다?
*/
class Pair{
	int x;
	int y;

	public Pair(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {
	int N;
	int M;
	int[][] breakCnt;
	char[][] map;
	int[] dx = {-1, 0, 1, 0};
	int[] dy = {0, 1, 0, -1};

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		map = new char[N][M];
		breakCnt = new int[N][M];

		for (int i = 0; i < N; i++) {
			map[i] = br.readLine().toCharArray();
			Arrays.fill(breakCnt[i], Integer.MAX_VALUE);
		}
	}

	public void solve() {
		Queue<Pair> queue = new LinkedList<>();
		queue.add(new Pair(0, 0));
		breakCnt[0][0] = 0;

		while (!queue.isEmpty()) {
			Pair cur = queue.poll();

			for (int dir = 0; dir < 4; dir++) {
				int nx = cur.x + dx[dir];
				int ny = cur.y + dy[dir];

				if(nx < 0 || ny < 0 || nx >= N || ny >= M) continue;
				int cnt = map[nx][ny] == '1' ? breakCnt[cur.x][cur.y] + 1 : breakCnt[cur.x][cur.y];
				if(breakCnt[nx][ny] <= cnt) continue;
				breakCnt[nx][ny] = cnt;
				queue.add(new Pair(nx, ny));
			}
		}

		System.out.println(breakCnt[N - 1][M - 1]);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}
