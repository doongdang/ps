import java.io.*;
import java.util.*;

class Pair{
	int x;
	int y;
	
	public Pair(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {
	static int N;
	static int M;
	static int[] dx = {-1, 0, 1, 0};
	static int[] dy = {0, -1, 0, 1};
	static int[][] map;
	static int[][] tmp;
	static ArrayList<Pair> startList;
	static ArrayList<Pair> zeroList;
	static boolean[] vis;
	static int ans = 0;
	
	public static void dfs(int cnt) {
		if(cnt == 3) {
			tmp = new int[N][M];
			
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < M; j++) {
					tmp[i][j] = map[i][j];
				}
			}
			
			for(int i = 0; i < vis.length; i++) {
				if(vis[i]) {
					tmp[zeroList.get(i).x][zeroList.get(i).y] = 1;
				}
			}
			
			Queue<Pair> queue = new LinkedList<>();
			
			for(Pair start : startList) {
				queue.offer(start);
			}
			
			while(!queue.isEmpty()) {
				Pair cur = queue.poll();
				
				for(int dir = 0; dir < 4; dir++) {
					int nx = cur.x + dx[dir];
					int ny = cur.y + dy[dir];
					if(nx < 0 || ny < 0 || nx >= N || ny >= M) continue;
					if(tmp[nx][ny] != 0) continue;
					tmp[nx][ny] = 2;
					queue.offer(new Pair(nx, ny));
				}
			}
			int sum = 0;
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < M; j++) {
					if(tmp[i][j] == 0) {
						sum += 1;
					}
				}
			}
			ans = Math.max(ans, sum);
			return;
		}
		
		for(int i = 0; i < zeroList.size(); i++) {
			if(!vis[i]) {
				vis[i] = true;
				dfs(cnt+1);
				vis[i] = false;
			}
		}
	}
	
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();

		st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		startList = new ArrayList<>();
		zeroList = new ArrayList<>();
		
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if(map[i][j] == 2) startList.add(new Pair(i, j));
				if(map[i][j] == 0) zeroList.add(new Pair(i, j));
			}
		}
		
		vis = new boolean[zeroList.size()];		
		dfs(0);
		
		System.out.println(ans);
	}
}
