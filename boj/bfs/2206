import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
import java.util.stream.Stream;


public class Main {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		char[][] board = new char[N][M];
		int[][][] dist = new int[N][M][2];
		Queue<int[]> queue = new LinkedList<>();

		int[] dx = {-1, 0, 1, 0};
		int[] dy = {0, -1, 0, 1};

		for (int i = 0; i < N; i++) {
			String s = br.readLine();
			for (int j = 0; j < M; j++) {
				board[i][j] = s.charAt(j);
			}
		}

		dist[0][0][0] = 1;
		queue.offer(new int[]{0, 0, 0});

		while(!queue.isEmpty()){
			int[] cur = queue.poll();
			if(cur[0] == N-1 && cur[1] == M-1){
				System.out.println(dist[cur[0]][cur[1]][cur[2]]);
				return;
			}
			for (int i = 0; i < 4; i++) {
				int nx = cur[0] + dx[i];
				int ny = cur[1] + dy[i];
				if(nx < 0 || ny < 0 || nx >= N || ny >= M) continue;
				if(dist[nx][ny][cur[2]] != 0) continue;
				if(board[nx][ny] == '0'){
					dist[nx][ny][cur[2]] = dist[cur[0]][cur[1]][cur[2]] + 1;
					queue.offer(new int[] {nx, ny, cur[2]});
				}
				if(board[nx][ny] == '1'){
					if(cur[2] == 0){
						dist[nx][ny][1] = dist[cur[0]][cur[1]][cur[2]] + 1;
						queue.offer(new int[] {nx, ny, 1});
					}
				}
			}
		}
		System.out.println(-1);
	}
}
