import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	int n, k;
	boolean[] canCall;
	int[][] dp;
	boolean isFirstWin;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		n = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		canCall = new boolean[n + 1];
		Arrays.fill(canCall, true);
		dp = new int[2][n + 1];

		st = new StringTokenizer(br.readLine());

		while (st.hasMoreTokens()) {
			canCall[Integer.parseInt(st.nextToken())] = false;
		}

		for (int i = 0; i < 2; i++) {
			Arrays.fill(dp[i], -1);
		}
	}

	public void solve() {
		System.out.println(recursion(0, 0)^1);
	}

	public int recursion(int cur, int lastCall) {
		if (dp[cur][lastCall] != -1)
			return dp[cur][lastCall];

		for (int i = 1 + lastCall; i <= Math.min(k + lastCall, n); i++) {
			if (canCall[i]) {
				canCall[i] = false;
				int result = recursion(cur ^ 1, i);
				canCall[i] = true;
				if (result == cur) { // 현재 플레이어가 이길 수 있는 경우
					dp[cur][lastCall] = cur;
					return dp[cur][lastCall]; // 현재 플레이어의 승리
				}
			}
		}

		dp[cur][lastCall] = cur ^ 1; // 현재 플레이어가 이길 수 없는 경우, 상대 플레이어의 승리
		return dp[cur][lastCall];
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}