import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	int n, k;
	boolean[] canCall;
	int[] dp;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		n = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		canCall = new boolean[n + 1];
		Arrays.fill(canCall, true);
		dp = new int[n + 1];

		st = new StringTokenizer(br.readLine());

		while (st.hasMoreTokens()) {
			canCall[Integer.parseInt(st.nextToken())] = false;
		}

		Arrays.fill(dp, -1);
	}

	public void solve() {
		System.out.println(recursion(0));
	}

	//dp 값이 1이면 승리, 0이면 패배
	public int recursion(int lastCall) {
		if (dp[lastCall] != -1)
			return dp[lastCall];

		for (int i = 1 + lastCall; i <= Math.min(k + lastCall, n); i++) {
			if (canCall[i]) {
				canCall[i] = false;
				int result = recursion(i); //다음 턴 결과 내다보기
				canCall[i] = true;
				if (result == 0) { // 현재 플레이어가 이길 수 있는 경우 (다음 턴에 외치는 사람이 패배하는 경우)
					dp[lastCall] = 1;
					return dp[lastCall]; // 현재 플레이어의 승리
				}
			}
		}

		dp[lastCall] = 0; // 현재 플레이어가 이길 수 없는 경우
		return dp[lastCall];
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}