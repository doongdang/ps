import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		StringTokenizer st;

		int T = Integer.parseInt(br.readLine());

		for (int i = 0; i < T; i++) {
			int N = Integer.parseInt(br.readLine());

			long[][] dp = new long[N+1][10];

			Arrays.fill(dp[1], 1);

			for (int j = 2; j <= N; j++) {
				dp[j][0] = (dp[j-1][7]) % 1234567;
				dp[j][1] = (dp[j-1][2] + dp[j-1][4]) % 1234567;
				dp[j][2] = (dp[j-1][1] + dp[j-1][3] + dp[j-1][5]) % 1234567;
				dp[j][3] = (dp[j-1][2] + dp[j-1][6]) % 1234567;
				dp[j][4] = (dp[j-1][1] + dp[j-1][5] + dp[j-1][7]) % 1234567;
				dp[j][5] = (dp[j-1][2] + dp[j-1][4] + dp[j-1][6]+ dp[j-1][8]) % 1234567;
				dp[j][6] = (dp[j-1][3] + dp[j-1][5] + dp[j-1][9]) % 1234567;
				dp[j][7] = (dp[j-1][0] + dp[j-1][4] + dp[j-1][8]) % 1234567;
				dp[j][8] = (dp[j-1][5] + dp[j-1][7] + dp[j-1][9]) % 1234567;
				dp[j][9] = (dp[j-1][6] + dp[j-1][8]) % 1234567;
			}

			long ans = 0;

			for (int j = 0; j < 10; j++) {
				ans += dp[N][j];
			}

			ans %= 1234567;

			sb.append(ans);
			sb.append("\n");

		}
		System.out.println(sb);
	}
}
