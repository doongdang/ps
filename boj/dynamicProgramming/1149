import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	int N;
	int[][] colors;
	int[][] dp;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		colors = new int[N][4];
		dp = new int[N][4];

		for (int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= 3; j++) {
				colors[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		for (int i = 0; i < N; i++) {
			Arrays.fill(dp[i], -1);
		}
	}

	public void solve() {
		System.out.println(recursion(0, 0));
	}

	public int recursion(int cur, int lastColor) {
		if(cur == N){
			return 0;
		}

		if(dp[cur][lastColor] != -1){
			return dp[cur][lastColor];
		}

		int val = Integer.MAX_VALUE;

		for (int i = 1; i <= 3; i++) {
			if(lastColor == i) continue;
			val = Math.min(val, recursion(cur+1, i) + colors[cur][i]);
		}

		dp[cur][lastColor] = val;

		return dp[cur][lastColor];
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}