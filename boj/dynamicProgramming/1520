import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	int N, M;
	int[][] map;
	int[][] dp;
	int[] dx;
	int[] dy;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		map = new int[M][N];
		dp = new int[M][N];
		dx = new int[] {1, 0, -1, 0};
		dy = new int[] {0, -1, 0, 1};

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				dp[i][j] = -1;
			}
		}
	}

	public void solve() {
		System.out.println(recursion(0, 0));
	}

	public int recursion(int x, int y) {
		if (x == M - 1 && y == N - 1) {
			return 1;
		}

		if(dp[x][y] != -1) return dp[x][y];

		int val = 0;

		for (int dir = 0; dir < 4; dir++) {
			int nx = x + dx[dir];
			int ny = y + dy[dir];

			if(nx < 0 || ny < 0 || nx >= M || ny >= N) continue;
			if(map[nx][ny] >= map[x][y]) continue;

			val += recursion(nx, ny);

		}

		dp[x][y] = val;

		return dp[x][y];
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}