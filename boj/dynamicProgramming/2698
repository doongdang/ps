import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/*
	비트 수가 k면서 길이가 n인 문자열의 개수는 다음과 같다.
	(비트 수가 k면서 길이가 n이면서 0으로 끝나는 문자열의 개수) + (비트 수가 k면서 길이가 n이면서 1로 끝나는 문자열의 개수)

	각각의 경우에 대해 다시 개수를 얻기 위해서는 다음의 과정이 필요하다.

	비트 수가 k면서 길이가 n이면서 0으로 끝나는 문자열의 개수 = (비트 수가 k면서 길이가 n-1이면서 0로 끝나는 문자열 개수) + (비트 수가 k면서 길이가 n-1이면서 1으로 끝나는 문자열 개수)
	비트 수가 k면서 길이가 n이면서 1으로 끝나는 문자열의 개수 = (비트 수가 k면서 길이가 n-1이면서 0로 끝나는 문자열 개수) + (비트 수가 k-1면서 길이가 n-1이면서 1으로 끝나는 문자열 개수)

	k, n, 0 = k, n-1, 0 + k, n-1, 1
	k, n, 1 = k, n-1, 0 + k-1, n-1, 1
*/
public class Main {
	int T;

	//인접 비트 수, 문자열 길이, 마지막 자리가 0인지 1인지
	int[][][] dp;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		T = Integer.parseInt(br.readLine());
		dp = new int[101][101][2];

		dp[0][1][0] = 1;
		dp[0][1][1] = 1;

		for (int i = 2; i <= 100; i++) {
			dp[0][i][0] = dp[0][i-1][1] + dp[0][i-1][0];
			dp[0][i][1] = dp[0][i-1][0];
		}

		for (int i = 0; i < T; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());

			int n = Integer.parseInt(st.nextToken());
			int k = Integer.parseInt(st.nextToken());

			solve(n, k);
		}
	}

	public void solve(int n, int k) {
		for (int cntOfk = 1; cntOfk <= k; cntOfk++) {
			for (int cntOfn = 2; cntOfn <= n; cntOfn++) {
				dp[cntOfk][cntOfn][0] = dp[cntOfk][cntOfn-1][0] + dp[cntOfk][cntOfn-1][1];
				dp[cntOfk][cntOfn][1] = dp[cntOfk][cntOfn-1][0] + dp[cntOfk-1][cntOfn-1][1];
			}
		}

		System.out.println(dp[k][n][0] + dp[k][n][1]);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
	}
}