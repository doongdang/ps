import java.io.*;
import java.util.*;

class Pair{
	int x;
	int y;
	
	public Pair(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {
	static int N;
	static int M;
	static int[] dx = {-1, -1, 1, 1};
	static int[] dy = {-1, 1, -1, 1};
	static int[][] map;
	static boolean[][] cloudMap;
	static ArrayList<Pair> cloudCoords;
	
	public static void cloudMove(int dir, int dist, Pair cloud) {
		switch (dir) {
			case 1:
				cloud.y -= dist;
				break;
	
			case 2:
				cloud.x -= dist;
				cloud.y -= dist;
				break;
						
			case 3:
				cloud.x -= dist;
				break;
				
			case 4:
				cloud.x -= dist;
				cloud.y += dist;
				break;
				
			case 5:
				cloud.y += dist;
				break;
				
			case 6:
				cloud.x += dist;
				cloud.y += dist;
				break;
				
			case 7:
				cloud.x += dist;
				break;
				
			case 8:
				cloud.x += dist;
				cloud.y -= dist;
				break;
		}
		
		if(cloud.x <= 0) cloud.x = cloud.x + N*(Math.abs(cloud.x)/N+1);
		if(cloud.y <= 0) cloud.y = cloud.y + N*(Math.abs(cloud.y)/N+1);
		if(cloud.x > N) cloud.x = cloud.x % N != 0 ? cloud.x % N : N;
		if(cloud.y > N) cloud.y = cloud.y % N != 0 ? cloud.y % N : N;
		
	}
	
	public static void waterCopy(Pair cloud) {
		for(int dir = 0; dir < 4; dir++) {
			int nx = cloud.x + dx[dir];
			int ny = cloud.y + dy[dir];
			
			if(nx < 1 || ny < 1 || nx > N || ny > N) continue;
			if(map[nx][ny] != 0) map[cloud.x][cloud.y]++;
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();
		
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		int ans = 0;
		map = new int[N+1][N+1];
		cloudMap = new boolean[N+1][N+1];
		cloudCoords = new ArrayList<>();
		
		for(int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 1; j <= N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		cloudCoords.add(new Pair(N, 1));
		cloudCoords.add(new Pair(N, 2));
		cloudCoords.add(new Pair(N-1, 1));
		cloudCoords.add(new Pair(N-1, 2));
		
		for(int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int d = Integer.parseInt(st.nextToken());
			int s = Integer.parseInt(st.nextToken());
			
			for(Pair cloud : cloudCoords) {
				cloudMove(d, s, cloud);
				map[cloud.x][cloud.y] += 1;
				cloudMap[cloud.x][cloud.y] = true;
			}
						
			for(Pair cloud : cloudCoords) {
				waterCopy(cloud);
			}
			
			cloudCoords.clear();
			
			for(int row = 1; row <= N; row++) {
				for(int col = 1; col <= N; col++) {
					if(cloudMap[row][col]) cloudMap[row][col] = false;
					else if(!cloudMap[row][col] && map[row][col] >= 2) {
						cloudCoords.add(new Pair(row, col));
						map[row][col] -= 2;
					}
				}
			}
		}
		
		for(int i = 1; i <= N; i++) {
			for(int j = 1; j <= N; j++) {
				ans += map[i][j];
			}
		}
		System.out.println(ans);
	}
}
