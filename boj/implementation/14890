import java.io.*;
import java.util.*;

public class Main {
	static int N;
	static int L;
	static int[][] map;
	static boolean[] ladderMap;
	static int ans;
	
	public static void findPathRow(int x) {
		ladderMap = new boolean[N];
		
		int prev = map[x][0];
		for(int i = 0; i < N; i++) {
			if(prev + 1 == map[x][i]) {
				if(i-L < 0) return;
				for(int back = i-L; back < i; back++) {
					if(ladderMap[back]) return;
				}
				
				for(int back = i-L; back < i; back++) {
					ladderMap[back] = true;
				}
				
				prev = map[x][i];
			}else if(prev == map[x][i] + 1) {
				if(i+L-1 >= N) return;
				for(int front = i; front < i+L; front++) {
					if(prev != map[x][front] + 1) {
						return;
					}
				}
				
				for(int front = i; front < i+L; front++) {
					ladderMap[front] = true;
				}
				prev = map[x][i];
				
			}else if(prev == map[x][i]) {
				continue;
			}else {
				return;
			}
		}
		ans += 1;
	}
	
	public static void findPathCol(int x) {
		ladderMap = new boolean[N];
		
		int prev = map[0][x];
		for(int i = 0; i < N; i++) {
			if(prev + 1 == map[i][x]) {
				if(i-L < 0) return;
				for(int back = i-L; back < i; back++) {
					if(ladderMap[back]) return;
				}
				
				for(int back = i-L; back < i; back++) {
					ladderMap[back] = true;
				}
				
				prev = map[i][x];
			}else if(prev == map[i][x] + 1) {
				if(i+L-1 >= N) return;
				for(int front = i; front < i+L; front++) {
					if(prev != map[front][x] + 1) {
						return;
					}
				}
				
				for(int front = i; front < i+L; front++) {
					ladderMap[front] = true;
				}
				prev = map[i][x];
			}else if(prev == map[i][x]) {
				continue;
			}else {
				return;
			}
		}
		ans += 1;
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();
			
		st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		L = Integer.parseInt(st.nextToken());
		
		map = new int[N][N];

		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		
		for(int i = 0; i < N; i++) {
			findPathRow(i);
			findPathCol(i);
		}
		System.out.println(ans);
	}
}
