import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Main {
    int N;
    int[][] A;

    double[][] ratios = {
            {-1, 1, 0.01}, {1, 1, 0.01},
            {-2, 0, 0.02}, {2, 0, 0.02},
            {0, -2, 0.05},
            {-1, 0, 0.07}, {1, 0, 0.07},
            {-1, -1, 0.1}, {1, -1, 0.1},
            {0, -1}
    };

    List<int[]> movingOrder;

    // 0 -> 왼쪽, 1 -> 아랫쪽, 2 -> 오른쪽, 3 -> 윗쪽
    int[] dx = {0, 1, 0, -1};
    int[] dy = {-1, 0, 1, 0};
    int answer;


    public void init() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        N = Integer.parseInt(br.readLine());

        A = new int[N][N];

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                A[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        int dist = 1;
        movingOrder = new ArrayList<>();
        // 0 -> 왼쪽, 1 -> 아랫쪽, 2 -> 오른쪽, 3 -> 윗쪽
        for(int i = 0; i < N/2; i++){
            movingOrder.add(new int[]{0, dist});
            movingOrder.add(new int[]{1, dist});
            movingOrder.add(new int[]{2, dist+1});
            movingOrder.add(new int[]{3, dist+1});
            dist += 2;
        }
        //마지막 왼쪽 이동
        movingOrder.add(new int[]{0, dist-1});
    }

    public void moveByOrder(){
        int x = N/2;
        int y = N/2;
        for (int[] order : movingOrder) {
            for (int step = 0; step < order[1]; step++) {
                x += dx[order[0]];
                y += dy[order[0]];
                scatter(order[0], x, y);
            }
        }
    }

    public void scatter(int dir, int x, int y){
        int tx, ty;
        int sum = 0;

        for (int i = 0; i < ratios.length; i++) {
            if(dir == 0){
                tx = x + (int)ratios[i][0];
                ty = y + (int)ratios[i][1];
            }else if(dir == 1){
                tx = x - (int)ratios[i][1];
                ty = y - (int)ratios[i][0];
            }else if(dir == 2){
                tx = x - (int)ratios[i][0];
                ty = y - (int)ratios[i][1];
            }else{
                tx = x + (int)ratios[i][1];
                ty = y + (int)ratios[i][0];
            }

            if(i != ratios.length - 1){
                int split = (int)(A[x][y] * ratios[i][2]);
                sum += split;

                if (isOutBound(tx, ty)){
                    answer += split;
                }else{
                    A[tx][ty] += split;
                }
            }else{
                int rest = A[x][y] - sum;
                if(isOutBound(tx, ty)){
                    answer += rest;
                }else{
                    A[tx][ty] += rest;
                }
            }
        }

        A[x][y] = 0;
    }

    public boolean isOutBound(int x, int y){
        return x < 0 || x >= N || y < 0 || y >= N;
    }

    public static void main(String[] args) throws IOException {
        Main main = new Main();
        main.init();
        main.moveByOrder();

        System.out.println(main.answer);
    }
}
