import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	int N, M;
	int[][] board;
	int[][] prefix_sum;
	int answer;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		board = new int[N + 1][M + 1];
		prefix_sum = new int[N + 1][M + 1];
		answer = Integer.MIN_VALUE;

		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= M; j++) {
				board[i][j] = Integer.parseInt(st.nextToken());
			}
		}
	}

	public void solve() {
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= M; j++) {
				prefix_sum[i][j] = prefix_sum[i][j - 1] + prefix_sum[i - 1][j] - prefix_sum[i - 1][j - 1] + board[i][j];
			}
		}

		// for (int i = 1; i <= N; i++) {
		// 	System.out.println(Arrays.toString(prefix_sum[i]));
		// }

		//높이 인덱스 x1 ~ x2, 너비 인덱스 y1 ~ y2를 갖는 부분행렬의 값을 구하는 법.
		// 1~x2, 1~y2까지의 합을 구하고, (1~x2, 1~y1 - 1), (1~x1 - 1, 1~y2)를 빼주고, 1~x1 - 1, 1~y1 -1을 더해준다.
		for (int x1 = 1; x1 <= N; x1++) {
			for (int y1 = 1; y1 <= M; y1++) {
				for (int x2 = x1; x2 <= N; x2++) {
					for (int y2 = y1; y2 <= M; y2++) {
						int sum =
							prefix_sum[x2][y2] - prefix_sum[x2][y1 - 1] - prefix_sum[x1 - 1][y2] + prefix_sum[x1 - 1][y1
								- 1];
						answer = Math.max(answer, sum);
					}
				}
			}
		}

		// for (int i = 1; i <= N; i++) {
		// 	for (int j = 1; j <= M; j++) {
		// 		answer = Math.max(answer, board[i][j]);
		// 	}
		// }
		//
		System.out.println(answer);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}