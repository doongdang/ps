import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/*
	아이디어
		NxH 크기의 2차원 배열을 통한 풀이는 공간 복잡도 제약 상 불가하다.
		우선, 홀수(석순)와 짝수(종유석)을 분리하여 생각한다.
		홀수 => 높이 heights[i] 이하면 장애물에 걸린다.
		짝수 => 전체 높이 H - heights[i] + 1 이상이면 장애물에 걸린다.

		[홀,짝 여부][높이] 로 이루어진 2차원 배열을 구성하고, 높이가 존재하면 홀,짝 인덱스를 구분하여 1로 표시한다.
		홀수 인덱스의 경우 낮은 높이를 지나가면 무조건 높은 높이에 걸리기 때문에, 높은 높이 -> 낮은 높이 순으로 누적합을 계산한다.
		짝수 인덱스의 경우 높은 높이를 지나가면 무조건 낮은 높이에 걸리기 때문에 낮은 높이 -> 높은 높이 순으로 누적합을 계산한다.

		이후 1 ~ H까지 순회하면서 [홀][현재 높이] + [짝][현재 높이] 합의 최솟값과 최솟값에 해당하는 높이의 개수를 세면 그게 정답이다.
*/

public class Main {
	int N, H;
	int[][] prefixSum;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		H = Integer.parseInt(st.nextToken());
		prefixSum = new int[2][H+2];

		for (int i = 0; i < N; i++) {
			int height = Integer.parseInt(br.readLine());

			if(i % 2 == 0) prefixSum[0][height] += 1;
			else prefixSum[1][H - height + 1] += 1;
		}
	}

	public void solve() {
		for (int i = H; i >= 1; i--) {
			prefixSum[0][i] += prefixSum[0][i+1];
		}

		for (int i = 1; i <= H; i++) {
			prefixSum[1][i] += prefixSum[1][i-1];
		}

		int answerVal = Integer.MAX_VALUE;
		int answerCnt = 0;

		for (int i = 1; i <= H; i++) {
			int val = prefixSum[0][i] + prefixSum[1][i];
			if(val < answerVal) {
				answerVal = val;
				answerCnt = 1;
			}else if(val == answerVal) {
				answerCnt++;
			}
		}

		System.out.println(answerVal + " " + answerCnt);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}