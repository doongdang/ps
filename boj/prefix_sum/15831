import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

/*
	접근법
		아이디어 1.
			투 포인터를 통해 연속 구간을 늘린다.
			늘려가던 도중 검은 조약돌의 개수가 B를 초과하면, W의 개수를 확인하여 정답 조건에 부합하는지 확인
			이후 포인터를 이동?
			포인터는 검은 조약돌의 조건을 충족시키는 곳으로 이동해야함
				=> 검은 돌의 누적합 배열로 해결. 최초 등장 인덱스 기록

		아이디어 2.
			검은 돌 개수의 누적합 배열을 생성
			답이 될 수 있는 구간 =>
				만약 현재 검은 돌 개수의 누적합이 B보다 작거나 같다? => 시작 ~ 다음 누적합의 최초 등장 위치 - 1
				만약 현재 검은 돌 개수의 누적합이 B보다 크다 => (현재 누적합 - B)의 위치 + 1~ 다음 누적합 최초 등장 위치 -1
*/

public class Main {
	int N;
	int B;
	int W;
	int[] prefixSumOfB;
	int[] prefixSumOfW;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		B = Integer.parseInt(st.nextToken());
		W = Integer.parseInt(st.nextToken());
		prefixSumOfB = new int[N + 1];
		prefixSumOfW = new int[N + 1];
		String marble = br.readLine();

		for (int i = 0; i < N; i++) {
			if (marble.charAt(i) == 'B') {
				prefixSumOfB[i + 1] = 1;
			}

			if (marble.charAt(i) == 'W') {
				prefixSumOfW[i + 1] = 1;
			}
		}
	}

	public void solve() {
		Map<Integer, Integer> cntMapOfB = new HashMap<>();

		for (int i = 1; i <= N; i++) {
			prefixSumOfB[i] += prefixSumOfB[i - 1];
			prefixSumOfW[i] += prefixSumOfW[i - 1];

			if (!cntMapOfB.containsKey(prefixSumOfB[i])) {
				cntMapOfB.put(prefixSumOfB[i], i);
			}
		}

		cntMapOfB.put(prefixSumOfB[N] + 1, N + 1);

		int answer = 0;

		for (int i = 1; i <= N; i++) {
			if (prefixSumOfB[i] <= B) {
				int endIdx = cntMapOfB.get(prefixSumOfB[i] + 1) - 1;
				if (prefixSumOfW[endIdx] >= W) {
					answer = Math.max(answer, endIdx);
				}
			}

			if (prefixSumOfB[i] > B) {
				int startIdx = cntMapOfB.get(prefixSumOfB[i] - B);
				int endIdx = cntMapOfB.get(prefixSumOfB[i] + 1) - 1;

				if(prefixSumOfW[endIdx] - prefixSumOfW[startIdx] >= W) {
					answer = Math.max(answer, endIdx - startIdx);
				}
			}
		}

		System.out.println(answer);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}