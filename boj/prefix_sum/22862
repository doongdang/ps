import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;


/*
	접근법
		홀수 위치의 index를 기록해두고, 이를 투 포인터의 변경에 사용한다??
			=> 시간초과 발생
		그러면 홀수 개수의 누적합 배열을 만들고, 최소 개수 변경 index를 기록해서 사용한다?
*/

public class Main {
	int N;
	int K;
	int[] S;
	int[] prefixSum;
	Map<Integer, Integer> oddIndexes;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		S = new int[N];
		oddIndexes = new HashMap<>();
		prefixSum = new int[N + 1];
		st = new StringTokenizer(br.readLine());

		for (int i = 0; i < N; i++) {
			S[i] = Integer.parseInt(st.nextToken());

			if (S[i] % 2 == 1) {
				prefixSum[i + 1] = 1;
			}
		}
	}

	public void solve() {
		for (int i = 1; i <= N; i++) {
			prefixSum[i] += prefixSum[i - 1];

			if(!oddIndexes.containsKey(prefixSum[i])) {
				oddIndexes.put(prefixSum[i], i);
			}
		}

		int answer = 0;

		for (int i = 1; i <= N; i++) {
			if (prefixSum[i] <= K) {
				answer = Math.max(answer, i - prefixSum[i]);
			} else {
				answer = Math.max(answer, i - oddIndexes.get(prefixSum[i] - K) - K);
			}
		}

		System.out.println(answer);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}