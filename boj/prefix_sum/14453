import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/*
	Hoof > Scissors > Paper > Hoof

	아이디어
	=> Bessie가 내는 종류에 따라 FJ가 내는 종류의 누적합이 승리 횟수가 된다.
	만약 3번째까지 Bessie가 S를 냈다면, 3번째까지의 Bessie의 승리 횟수는 3번째까지 등장한 FJ의 P의 누적 횟수다.
	따라서, 3가지 종류별 idx마다 FJ의 누적 합을 구해놓은 후, idx마다 이길 수 있는 최대 횟수의 조합을 구하면 된다.

	for(int idx = 1; idx <= N; idx++)
		prefixSum[idx][종류] + prefixSum[N][변경된 종류] - prefixSum[idx][변경된 종류];


*/

public class Main {
	int N;
	//0 -> Hook, 1 -> Scissor, 2 -> Paper
	int[][] prefixSum;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		prefixSum = new int[N+1][3];

		for (int i = 1; i <= N; i++) {
			char gesture = br.readLine().charAt(0);
			if (gesture == 'H') prefixSum[i][0] = 1;
			if (gesture == 'S') prefixSum[i][1] = 1;
			if (gesture == 'P') prefixSum[i][2] = 1;
		}
	}

	public void solve() {
		for (int i = 1; i <= N; i++) {
			prefixSum[i][0] += prefixSum[i-1][0];
			prefixSum[i][1] += prefixSum[i-1][1];
			prefixSum[i][2] += prefixSum[i-1][2];
		}

		int answer = 0;

		for (int firstGesture = 0; firstGesture < 3; firstGesture++) {
			for (int secondGesture = 0; secondGesture < 3; secondGesture++) {
				if (firstGesture == secondGesture) continue;
				for (int i = 1; i <= N; i++) {
					answer = Math.max(answer, prefixSum[i][firstGesture] + prefixSum[N][secondGesture] - prefixSum[i][secondGesture]);
				}
			}
		}

		System.out.println(answer);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}