import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/*

*/

class Section{
	int x1;
	int y1;
	int x2;
	int y2;

	public Section(int x1, int y1, int x2, int y2) {
		this.x1 = x1;
		this.y1 = y1;
		this.x2 = x2;
		this.y2 = y2;
	}
}

public class Main {
	int N, M;
	int[][] prefixSum;
	Section[] sections;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		prefixSum = new int[N+1][N+1];
		sections = new Section[M];

		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= N; j++) {
				prefixSum[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			sections[i] = new Section(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
		}
	}

	public void solve() {
		StringBuilder answer = new StringBuilder();

		for (int x = 1; x <= N; x++) {
			for (int y = 1; y <= N; y++) {
				prefixSum[x][y] += prefixSum[x][y-1];
			}
		}

		for (int y = 1; y <= N; y++) {
			for (int x = 1; x <= N; x++) {
				prefixSum[x][y] += prefixSum[x-1][y];
			}
		}

		for (Section section : sections) {
			answer.append(prefixSum[section.x2][section.y2] - prefixSum[section.x1-1][section.y2] - prefixSum[section.x2][section.y1-1] + prefixSum[section.x1-1][section.y1-1]);
			answer.append("\n");
		}

		System.out.println(answer);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}