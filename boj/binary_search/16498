import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
	접근법
		A를 순회하며 a를 고르고 선택된 a에 가장 가까운 b를 고르고, 선택된 c에 가장 가까운 것을 고른다.
*/

public class Main {
	int[] A;
	int[] B;
	int[] C;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		A = new int[Integer.parseInt(st.nextToken())];
		B = new int[Integer.parseInt(st.nextToken())];
		C = new int[Integer.parseInt(st.nextToken())];
		st = new StringTokenizer(br.readLine());

		for (int i = 0; i < A.length; i++) {
			A[i] = Integer.parseInt(st.nextToken());
		}

		st = new StringTokenizer(br.readLine());

		for (int i = 0; i < B.length; i++) {
			B[i] = Integer.parseInt(st.nextToken());
		}

		st = new StringTokenizer(br.readLine());

		for (int i = 0; i < C.length; i++) {
			C[i] = Integer.parseInt(st.nextToken());
		}
	}

	public void solve() {
		int answer = Integer.MAX_VALUE;
		Arrays.sort(A);
		Arrays.sort(B);
		Arrays.sort(C);

		for (int a : A) {
			int b = binarySearch(a, B);
			int nearAc = binarySearch(a, C);
			int nearBc = binarySearch(b, C);

			answer = Math.min(answer, Math.abs(Math.max(a, Math.max(b, nearAc)) - Math.min(a, Math.min(b, nearAc))));
			answer = Math.min(answer, Math.abs(Math.max(a, Math.max(b, nearBc)) - Math.min(a, Math.min(b, nearBc))));
		}

		System.out.println(answer);
	}

	public int binarySearch(int target, int[] cards){
		int start = 0;
		int end = cards.length - 1;
		int diff = Integer.MAX_VALUE;
		int val = 0;

		while(start <= end){
			int mid = (start + end) / 2;

			if(cards[mid] == target){
				return cards[mid];
			}else if(cards[mid] > target){
				end = mid - 1;
			}else if(cards[mid] < target){
				start = mid + 1;
			}

			if(Math.abs(cards[mid] - target) < diff){
				diff = Math.abs(cards[mid] - target);
				val = cards[mid];
			}
		}

		return val;
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}