import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	int N, M;
	int[] dots;
	int[][] lines;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		dots = new int[N];
		lines = new int[M][2];
		st = new StringTokenizer(br.readLine());

		for (int i = 0; i < N; i++) {
			dots[i] = Integer.parseInt(st.nextToken());
		}

		Arrays.sort(dots);

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			lines[i][0] = Math.min(x, y);
			lines[i][1] = Math.max(x, y);
		}
	}

	public void solve() {
		StringBuilder result = new StringBuilder();

		for (int i = 0; i < M; i++) {
			int start = getStartIdx(lines[i][0]);
			int end = getEndIdx(lines[i][1]);

			System.out.println(start + " " + end);
			result.append(end - start).append("\n");
		}

		System.out.println(result);
	}

	private int getStartIdx(int target) {
		int start = 0;
		int end = N - 1;

		while(start <= end) {
			int mid = (start + end) / 2;

			if(target <= dots[mid]) {
				end = mid - 1;
			}else {
				start = mid + 1;
			}
		}

		return start;
	}

	private int getEndIdx(int target){
		int start = 0;
		int end = N - 1;

		while(start <= end) {
			int mid = (start + end) / 2;

			if(target >= dots[mid]) {
				start = mid + 1;
			}else {
				end = mid - 1;
			}
		}

		return start;
	}

	public static void main(String[] args) throws IOException {
		Main main = new Main();
		main.init();
		main.solve();
	}
}