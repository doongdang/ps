import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
	접근법
		승리 횟수 -> 자신보다 작은 숫자의 개수
		무승부 -> 자신과 동일한 숫자의 개수

*/

public class Main {
	int N;
	int M;
	int[] HI;
	int[] ARC;

	public void init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		HI = new int[N];
		ARC = new int[M];
		st = new StringTokenizer(br.readLine());

		for (int i = 0; i < N; i++) {
			HI[i] = Integer.parseInt(st.nextToken());
		}

		st = new StringTokenizer(br.readLine());

		for (int i = 0; i < M; i++) {
			ARC[i] = Integer.parseInt(st.nextToken());
		}
	}

	public void solve() {
		long winOfHI = 0;
		long winOfARC = 0;
		long draw = (long)N * M;
		Arrays.sort(HI);
		Arrays.sort(ARC);

		for (int i = 0; i < N; i++) {
			int start = 0;
			int end = M - 1;

			while (start <= end) {
				int mid = (start + end) / 2;

				if(ARC[mid] < HI[i]) {
					start = mid + 1;
				}else if(ARC[mid] > HI[i]) {
					end = mid - 1;
				}else{
					end = mid - 1;
				}
			}

			winOfHI += end + 1;

			start = 0;
			end = M - 1;

			while (start <= end) {
				int mid = (start + end) / 2;

				if(ARC[mid] < HI[i]) {
					start = mid + 1;
				}else if(ARC[mid] > HI[i]) {
					end = mid - 1;
				}else{
					start = mid + 1;
				}
			}

			winOfARC += M - start;
		}

		draw -= winOfHI + winOfARC;
		System.out.println(winOfHI + " " + winOfARC + " " + draw);
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.init();
		m.solve();
	}
}
