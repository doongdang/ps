import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());

		int[][] map = new int[N + 1][N + 1];

		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				if (i == j)
					map[i][j] = 0;
				else
					map[i][j] = Integer.MAX_VALUE / 2;
			}
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());

			int A = Integer.parseInt(st.nextToken());
			int B = Integer.parseInt(st.nextToken());
			int T = Integer.parseInt(st.nextToken());

			map[A][B] = T;
		}

		int K = Integer.parseInt(br.readLine());

		st = new StringTokenizer(br.readLine());

		int[] friends = new int[K];

		for (int i = 0; i < K; i++) {
			friends[i] = Integer.parseInt(st.nextToken());
		}

		for (int k = 1; k <= N; k++) {
			for (int i = 1; i <= N; i++) {
				for (int j = 1; j <= N; j++) {
					map[i][j] = Math.min(map[i][j], map[i][k] + map[k][j]);
				}
			}
		}
		int[] dest = new int[N + 1];
		int minTime = Integer.MAX_VALUE;

		for (int i = 1; i <= N; i++) {
			int time = 0;
			for (int friend : friends) {
				time = Math.max(time, map[i][friend] + map[friend][i]);
			}
			minTime = Math.min(minTime, time);
			dest[i] = time;
		}

		StringBuilder sb = new StringBuilder();

		for (int i = 1; i <= N; i++) {
			if (dest[i] == minTime) {
				sb.append(i);
				sb.append(" ");
			}
		}

		System.out.println(sb);
	}

}