import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

class Pair {
	int dest;
	int val;

	public Pair(int dest, int val) {
		this.dest = dest;
		this.val = val;
	}
}

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());

		LinkedList<Pair>[] adj = new LinkedList[N*M];

		for (int i = 0; i < M*N; i++) {
			adj[i] = new LinkedList<>();
		}

		for (int i = 0; i < M; i++) {
			String str = br.readLine();
			for (int j = 0; j < N; j++) {
				int cur = i*N + j; //현재 노드번호
				int val = str.charAt(j) - '0';
				if(cur > i*N){ //왼쪽에 추가
					adj[cur-1].add(new Pair(cur, val));
				}
				if(cur < N-1 + N*i){ //오른쪽에 추가
					adj[cur+1].add(new Pair(cur, val));
				}

				if(cur - N >= 0){ //위쪽에 추가
					adj[cur-N].add(new Pair(cur, val));
				}

				if(cur + N < N*M){// 아래쪽에 추가
					adj[cur+N].add(new Pair(cur, val));
				}
			}
		}

		int[] dist = new int[N*M];

		Arrays.fill(dist, Integer.MAX_VALUE/2);

		dist[0] = 0;

		PriorityQueue<Pair> pq = new PriorityQueue<>((p1, p2) -> p1.val - p2.val);

		pq.offer(new Pair(0, 0));

		while(!pq.isEmpty()){
			Pair cur = pq.poll();

			if(dist[cur.dest] != cur.val){
				continue;
			}

			for(Pair nxt : adj[cur.dest]){
				if(nxt.val + cur.val < dist[nxt.dest]){
					dist[nxt.dest] = nxt.val + cur.val;
					pq.offer(new Pair(nxt.dest, dist[nxt.dest]));
				}
			}
		}

		System.out.println(dist[N*M-1]);
	}
}