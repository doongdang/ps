import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

class Pair{
	int dest;
	int val;

	public Pair(int dest, int val){
		this.dest = dest;
		this.val = val;
	}
}

public class Main {
	int N, M;
	List<Pair>[] adjacent;
	int[] dist;

	public void init() throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		adjacent = new List[N + 1];
		dist = new int[N + 1];
		Arrays.fill(dist, Integer.MAX_VALUE / 2);

		for (int i = 1; i <= N; i++) {
			adjacent[i] = new ArrayList<>();
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			adjacent[a].add(new Pair(b, c));
			adjacent[b].add(new Pair(a, c));
		}
	}

	public void solve() {
		dist[1] = 0;
		PriorityQueue<Pair> pq = new PriorityQueue<>((p1, p2) -> p1.val - p2.val);
		pq.offer(new Pair(1, 0));

		while (!pq.isEmpty()) {
			Pair cur = pq.poll();

			if(dist[cur.dest] < cur.val) continue;

			for (Pair next : adjacent[cur.dest]) {
				if (dist[next.dest] > dist[cur.dest] + next.val) {
					dist[next.dest] = dist[cur.dest] + next.val;
					pq.offer(new Pair(next.dest, dist[next.dest]));
				}
			}
		}

		System.out.println(dist[N]);
	}

	public static void main(String[] args) throws Exception {
		Main main = new Main();
		main.init();
		main.solve();
	}
}