import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
//BOJ 1753번 - 최단 경로
//해당 문제를 토대로 우선순위 큐를 이용한 다익스트라 구현
//Pair 클래스를 생성하여 c++의 pair 대체
class Pair{
	int x;
	int y;
	public Pair(int x, int y) {
		this.x = x;
		this.y = y;
	}
}


public class Main {
	static int v, e, k; //k => 시작 정점. v
	static int[] dist; //최단 거리 테이블
	static LinkedList<Pair>[] adj; //그래프의 정보를 저장할 인접 리스트
 	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		v = Integer.parseInt(st.nextToken());
		e = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(br.readLine());

		dist = new int[v+1];
		adj = new LinkedList[v+1];

		for (int i = 0; i <= v; i++){
			adj[i] = new LinkedList<>();
			dist[i] = Integer.MAX_VALUE; //최단 거리 테이블 초기화
		}

		for (int i = 0; i < e; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			adj[u].add(new Pair(w, v)); //정점 u에 u에서 v로 가는 가중치 w의 정보 추가
		}

		PriorityQueue<Pair> pq = new PriorityQueue<>((p1, p2) -> p1.x - p2.x);
		dist[k] = 0;

		pq.add(new Pair(dist[k], k)); //우선순위 큐에 (0, 시작점 추가)
		while(!pq.isEmpty()){
			Pair cur = pq.poll();
			//우선순위 큐에서 거리가 가장 작은 원소를 선택, 해당 거리가 최단 거리 테이블에 있는 값과 다를 경우 넘어감
			if(dist[cur.y] != cur.x) continue;

			//원소가 가리키는 정점을 v라고 할 때, v와 이웃한 정점들에 대해 최단 거리 테이블 값보다 v를 거쳐가는 것이 더 작은 값을 가질 경우
			// 최단 거리 테이블의 값을 갱신하고 우선순위 큐에 (거리, 이웃한 정점의 번호)를 추가
			for(Pair nxt : adj[cur.y]){
				if(dist[nxt.y] <= dist[cur.y] + nxt.x) continue;
				dist[nxt.y] = dist[cur.y] + nxt.x;
				pq.add(new Pair(dist[nxt.y], nxt.y));
			}
		}

		for (int i = 1; i <= v; i++) {
			if(dist[i] == Integer.MAX_VALUE){
				System.out.println("INF");
			}else{
				System.out.println(dist[i]);
			}
		}
	}
}
