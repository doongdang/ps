import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

class Pair{
    int dest;
    int val;

    public Pair(int dest, int val) {
        this.dest = dest;
        this.val = val;
    }
}

class Tuple {
    int dest;
    int val;
    int cnt;

    public Tuple(int dest, int val, int cnt) {
        this.dest = dest;
        this.val = val;
        this.cnt = cnt;
    }
}

class Refresh{
    int val;
    int cnt;

    public Refresh(int val, int cnt) {
        this.val = val;
        this.cnt = cnt;
    }
}

public class Main {
    int n,m,k;
    List<Pair>[] adj;
    PriorityQueue<Integer>[] dist;

    public void init() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());

        adj = new List[n+1];
        dist = new PriorityQueue[n+1];

        for (int i = 0; i <= n; i++) {
            adj[i] = new ArrayList<>();
            dist[i] = new PriorityQueue<>((p1, p2) -> p2-p1);
        }

        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());

            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());

            adj[a].add(new Pair(b,c));
        }
    }

    public void dijkstra(){
        PriorityQueue<Pair> pq = new PriorityQueue<>((p1, p2) -> p1.val - p2.val);
        pq.offer(new Pair(1, 0));
        dist[1].offer(0);

        while(!pq.isEmpty()){
            Pair cur = pq.poll();

            for (Pair nxt : adj[cur.dest]) {
                int nxtDist = cur.val + nxt.val;

                if (dist[nxt.dest].size() == k) {
                    if(dist[nxt.dest].peek() > nxtDist){
                        dist[nxt.dest].poll();
                        dist[nxt.dest].offer(nxtDist);
                        pq.offer(new Pair(nxt.dest, nxtDist));
                    }
                }else {
                    dist[nxt.dest].offer(nxtDist);
                    pq.offer(new Pair(nxt.dest, nxtDist));
                }
            }
        }

    }

    public void printAnswer(){
        StringBuilder sb = new StringBuilder();

        for (int i = 1; i <=n; i++) {
            if(dist[i].size() < k){
                sb.append(-1);
            }else{
                sb.append(dist[i].peek());
            }
            sb.append("\n");
        }

        System.out.println(sb);
    }

    public static void main(String[] args) throws IOException {
        Main main = new Main();
        main.init();
        main.dijkstra();
        main.printAnswer();
    }
}
