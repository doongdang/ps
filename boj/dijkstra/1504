import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

class Pair {
	int dest;
	int val;

	public Pair(int dest, int val) {
		this.dest = dest;
		this.val = val;
	}
}

public class Main {

	static int N;
	static int E;
	static LinkedList<Pair>[] adj;

	public static int dijkstra(int start, int end) {
		int[] dist = new int[801];
		Arrays.fill(dist, 200000000);

		PriorityQueue<Pair> pq = new PriorityQueue<>((p1, p2) -> p1.val - p2.val);
		dist[start] = 0;
		pq.offer(new Pair(start, 0));

		while (!pq.isEmpty()) {
			Pair cur = pq.poll();

			if (dist[cur.dest] != cur.val) {
				continue;
			}

			for (Pair nxt : adj[cur.dest]) {
				if (nxt.val + cur.val < dist[nxt.dest]) {
					dist[nxt.dest] = nxt.val + cur.val;
					pq.offer(new Pair(nxt.dest, dist[nxt.dest]));
				}
			}
		}

		return dist[end];
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());

		adj = new LinkedList[N + 1];

		for (int i = 1; i <= N; i++) {
			adj[i] = new LinkedList<>();
		}

		for (int i = 0; i < E; i++) {
			st = new StringTokenizer(br.readLine());

			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());

			adj[a].add(new Pair(b, c));
			adj[b].add(new Pair(a, c));
		}

		st = new StringTokenizer(br.readLine());

		int v1 = Integer.parseInt(st.nextToken());
		int v2 = Integer.parseInt(st.nextToken());

		int root1 = dijkstra(1, v1) + dijkstra(v2, N) + dijkstra(v1, v2);
		int root2 = dijkstra(1, v2) + dijkstra(v1, N) + dijkstra(v2, v1);

		int ans = Math.min(root1, root2);

		if (ans >= 200000000) {
			System.out.println(-1);
		} else {
			System.out.println(ans);
		}
	}
}