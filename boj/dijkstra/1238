import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

class Pair{
	int dest;
	int val;

	public Pair(int dest, int val){
		this.dest= dest;
		this.val = val;
	}
}

public class Main {
	static int N;
	static int M;
	static int X;
	static LinkedList<Pair>[] dist;
	static int[] d;



	public static int dijkstra(int s, int e){
		d = new int[1001];
		Arrays.fill(d, Integer.MAX_VALUE/2);

		PriorityQueue<Pair> pq = new PriorityQueue<>((p1, p2) -> p1.val - p2.val);

		d[s] = 0;

		pq.offer(new Pair(s, 0));

		while(!pq.isEmpty()){
			Pair cur = pq.poll();

			if(cur.val != d[cur.dest]){
				continue;
			}

			for(Pair nxt : dist[cur.dest]){
				if(nxt.val + cur.val < d[nxt.dest]){
					d[nxt.dest] = nxt.val + cur.val;
					pq.offer(new Pair(nxt.dest, d[nxt.dest]));
				}
			}
		}

		return d[e];
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		X = Integer.parseInt(st.nextToken());

		dist = new LinkedList[N+1];

		for (int i = 1; i <= N; i++) {
			dist[i] = new LinkedList<>();
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());

			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int t = Integer.parseInt(st.nextToken());

			dist[a].add(new Pair(b, t));
		}


		int ans = 0;

		for (int i = 1; i <= N; i++) {
			ans = Math.max(ans, dijkstra(i, X)+ dijkstra(X, i));
		}

		System.out.println(ans);
	}
}