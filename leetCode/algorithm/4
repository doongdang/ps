class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length){ //nums1의 길이가 nums2의 길이보다 짧게 설정.
            return findMedianSortedArrays(nums2, nums1);
        }

        int x = nums1.length;
        int y = nums2.length;
        int low = 0; //nums1의 시작 index
        int high = x; //nums1의 마지막 index


        while(low <= high){
            int partitionX = (low+high)/2;
            //nums1의 절반에 해당하는 원소 개수 ex) nums1의 원소가 5개 -> 2개
            int partitionY = (x+y+1)/2 - partitionX;
            //nums1과 nums2를 합한 배열의 절반에 해당하는 원소에서 nums2의 비중
            //= 전체의 절반 원소 개수 - nums1의 절반 원소 개수

            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX -1];
            //만약 x의 절반에 해당하는 원소의 개수가 0이면 -무한대를, 아니면 원소의 개수-1의 인덱스를 지정.
            int minRightX = (partitionX == x) ? Integer.MAX_VALUE : nums1[partitionX];
            //만약 x의 절반에 해당하는 원소의 개수가 x면, 즉 모든 x의 원소가 y의 최소 원소보다 작으면 양의 무한대를
            //아니면 원소의 개수만큼의 인덱스를 지정.

            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];
            int minRightY = (partitionY == y) ? Integer.MAX_VALUE : nums2[partitionY];

            if(maxLeftX <= minRightY && maxLeftY <= minRightX){
                if((x+y) % 2 == 0){
                    return ((double)(Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)))/2;
                }else{
                    return (double)Math.max(maxLeftX, maxLeftY);
                }
            }else if(maxLeftX > minRightY){
                high = partitionX - 1;
            }else{
                low = partitionX + 1;
            }

        }
        return 0;
    }
}