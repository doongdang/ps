//Solution  1. (숫자 등장 횟수 counting + DP)
import java.util.*;

class Solution {
    public int minOperations(int[] nums) {
        int[] dp = new int[100001];

        dp[2] = 1;
        dp[3] = 1;
        dp[4] = 2;

        for(int i = 5; i <= 100000; i++){
            dp[i] = Math.min(dp[i-2], dp[i-3]) + 1;
        }

        int[] cnts = new int[1000001];

        for(int num : nums){
            cnts[num]++;
        }

        int ans = 0;

        for(int cnt : cnts){
            if(cnt == 1){
                return -1;
            }

            ans += dp[cnt];
        }

        return ans;
    }
}


//Solution 2. (숫자 등장 횟수 세기 + 수리적 발상)
//결국 1을 제외한 모든 숫자는 2와 3의 구성으로 만들 수 있다.
//4(2+2)에서 1을 증가한 5를 만들기 위해서는 (2+2)의 2 중 하나를 골라 3으로 만들어주면 된다.
class Solution {
    public int minOperations(int[] nums) {
        int[] cnts = new int[1000001];

        for(int num : nums) {
            cnts[num]++;
        }

        int ans = 0;

        for(int cnt : cnts){
            if(cnt == 1) {
                return -1;
            }

            if(cnt % 3 == 0){
                ans += cnt/3;
            }else{
                ans += cnt/3 + 1;
            }
        }

        return ans;
    }
}