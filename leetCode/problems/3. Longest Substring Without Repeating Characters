import java.util.HashSet;

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> hashSet = new HashSet<>();
        /*
        논리
        => 문자열 s의 첫 번째 문자부터 하나씩 set에 존재하는지 검사한다.
        만약 현재 선택한 문자가 set에 존재한다면, 해당 문자가 set에 존재하지 않을 때까지
        문자열의 앞에서부터 문자를 선택해 set에서 지워나간다.
        ex) 선택한 문자가 w고, set => {p, w}인 경우 p와 w를 모두 지운다.

        현재 선택한 문자가 set에 없다면, 해당 문자를 set에 추가하고 answer를
        answer와 set의 크기 중 큰 값으로 변경한다.
         */

        int cur = 0; //현재 선택한 문자의 index
        int deleteIdx = 0; //삭제할 문자의 index
        int answer = 0; //답

        while(cur < s.length()){
            if(!hashSet.contains(s.charAt(cur))){//선택된 문자가 set에 없다면
                hashSet.add(s.charAt(cur++)); //set에 해당 문자를 넣고 index를 1증가.
                answer = Math.max(answer, hashSet.size()); //answer 갱신
            }else{ //선택한 문자가 set에 존재한다면
                hashSet.remove(s.charAt(deleteIdx++));
                //선택한 문자가 set에서 없어질 때 까지 문자열의 앞쪽 문자부터 set에서 제거해나간다.
            }
        }

        return answer;
    }
}